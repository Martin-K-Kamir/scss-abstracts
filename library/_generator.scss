@charset "UTF-8";

/**
 * Main generator mixin, which can call other mixins and output various types of css properties based on the config.
 * Mixin only accepts one parameter, which is the config map. In case of using parameters instead of config,
 * We can use the direct mixins such as 'generate-font-scales' or 'generate-space-sizes'.
 *
 * Example of config map:
 * $config: (
 *  fonts' : ( - From this key the _generate-font-scales mixin will be called with given values.
 *  	'base' : {number} - The base value. Number must be with unit.
 *  	'ratio' : {number / string} - The ratio value. Number must be with no unit. Using string from $map-for-ratios.
 *  	'length' : {number} - The length of the generated css properties. Number must be with no unit.
 *  	'preserve' : {number} - The number of how many css properties will be preserved. Means if we change the base or ratio value, the preserved css properties will not be changed. Number must be with no unit.
 *  	'prefix' : {string} - Defines the name of css property and utility classes.
 *  	'prefix-class' : {string} - Defines the name of utility classes.
 *  	'prefix-variable' : {string} - Defines the name of css property.
 *  	'suffix' : {string} - Defines the order of the css properties and utility classes. Suffix has many options from $map-for-suffixes, or using numeric, numeric-hundreds suffixes. Also custom suffixes can be used.
 *  	'suffix-class' : {string} - Defines the name of utility classes.
 *  	'suffix-variable' : {string} - Defines the name of css property.
 *  	'src' : {list, map} - Defining the source of custom values from list or map. src can't be use with ratio, base, length, preserve. Using map prevents having prefix and suffix, because the keys will be used as the css property names.
 *  	'scale' : {number} - Scale the values from src. Number must use percentage unit.
 *  	'break-at' : {string} - Defines the min-width or max-width of the breakpoint by calling 'min' or 'max'.
 *  	'breakpoints' : {map}  - Defines the breakpoints and their values. Key is the breakpoint name from $map-for-breakpoints and value is the value of the breakpoint.
 *  	),
 *  spaces' : ( - From this key the _generate-space-scales mixin will be called with given values.
 *  	Using the same parameters as in fonts.
 *  	),
 *  'properties' : ( - From this key the _generate-properties mixin will be called with given values.
 *  	'predefined' : {boolean} - If true, predefined css properties will be generated.
 *  	'src' : {list} - List of maps to generate css properties from.
 *  ),
 *
 * @author - Martin Kam√≠r
 *
 */
@mixin generator($config) {

	// In case of having 'font-scales' map in config, call the 'generate-font-scales' mixin.
	@if map.has-key($config, 'font-scales') {
		@include generate-font-scales($config);
	}

	// In case of having 'space-scales' map in config, call the 'generate-space-scales' mixin.
	@if map.has-key($config, 'space-scales') {
		@include generate-space-scales($config);
	}

	@if map.has-key($config, 'classes') {
		@include generate-classes(config);
	}

	@if map.has-key($config, 'properties') {
		@include generate-properties(config);
	}
}


/**
Examples of usage

/////////////////////////////////
Example 1: Using parameters to generate font-size css properties based on $base, $ratio and $length values.

:root {
	@include generate-font-scales($base : 5rem, $ratio : 1.5, $length : 10);
}

Same values, same example but with the config map.

$config : (
	'base' : 5rem,
	'ratio' : 1.5,
	'length' : 10,
)

:root {
	@include generate-font-scales($config);
}


/////////////////////////////////
Example 2: Adding the 'breakpoints' and 'break-at' to the config map.
'break-at' defines the min-width or max-width of the breakpoint by calling 'min' or 'max'.
Add into 'breakpoints' as key the breakpoint value from $map-for-breakpoints, which will be used in the @media query.
In this case, the ratio will be changed. So the value will be map having a key ratio and value that will change.

NOTE: 'break-at' and 'breakpoints' can only be defined in the config map not as mixin parameter.

$config : (
	'base' : 5rem,
	'ratio' : 1.5,
	'length' : 10,
	'preserve' : 5,
	'break-at': max,
	'breakpoints' : (
		phone-lg: (ratio: 1.25),
	),
)

:root {
	@include generate-font-scales($config);
}


/////////////////////////////////
Example 3: We can use custom values by $src parameter as a list, map, or directly added into parameter as arglist. Values have to start from smallest to largest.

$list: (1rem, 2rem, 3rem, 4rem, 5rem);
$map: (f-size: 1rem, f-size-2: 2rem, f-size-3: 3rem, f-size-4: 4rem, f-size-5: 5rem);

:root {
	@include generate-font-scales($src: $list);
	@include generate-font-scales($src: $map);
	@include generate-font-scales($src: (1rem, 2rem, 3rem, 4rem, 5rem));
}

Same values, same example but with the config map.

$list: (1rem, 2rem, 3rem, 4rem, 5rem);
$map: (f-size: 1rem, f-size-2: 2rem, f-size-3: 3rem, f-size-4: 4rem, f-size-5: 5rem);

$config : (
	'src' : $list,
)

$config : (
	'src' : $map,
 )

$config : (
	'src' : (1rem, 2rem, 3rem, 4rem, 5rem),
)

:root {
	@include generate-font-scales($src: $config);
}


/////////////////////////////////
Example 4: Custom values with using 'breakpoints' and 'break-at'.
We specified the 'break-at' key as 'max' (max-width) and the 'breakpoints' having two breakpoints the 'tablet-md' with $list-2 and 'phone-lg' with $list-3.
The $list-2 has 3 values (2.5rem, 3.5rem, 4.5rem), which will be used than the 3 last values in 'src' $list-1 that are (3rem, 4rem, 5rem).
At $list-3 we only have one value (4.2rem), which will be used than the last value in 'src' $list-1 which is (5rem).
Basically list or map used in breakpoint will change the last values in src list or map.

$list-1: (1rem, 2rem, 3rem, 4rem, 5rem);
$list-2: (2.5rem, 3.5rem, 4.5rem);
$list-3: (4.2rem);

$config : (
	'src' : $list-1,
	'break-at': max,
	'breakpoints' : (
		tablet-md: $list-2,
		phone-lg: $list-3,
	),
 )

:root {
	@include generate-font-scales($src: $config);
}

/////////////////////////////////
Example 5: Having custom values give us the ability to use the $scale parameter to change the values.

$list: (1rem, 2rem, 3rem, 4rem, 5rem);
$map: (f-size: 1rem, f-size-2: 2rem, f-size-3: 3rem, f-size-4: 4rem, f-size-5: 5rem);

:root {
	@include generate-font-scales($src: $list, 150%);
	@include generate-font-scales($src: $map), 50%;
}

Now the values will be changed by the $scale value.
$list: (1.5rem, 3rem, 4.5rem, 6rem, 7.5rem);
$map: (f-size: 0.5rem, f-size-2: 1rem, f-size-3: 1.5rem, f-size-4: 2rem, f-size-5: 2.5rem);


/////////////////////////////////
Example 6: Using prefixes and suffixes.

:root {
	@include generate-font-scales($base : 5rem, $ratio : 1.5, $length : 10, $prefix: 'text-', $suffix: 'roman');
}

or using config map

 $config : (
	'base' : 5rem,
	'ratio' : 1.5,
	'length' : 10,
	'prefix' : 'text-',
	'suffix' : 'roman',
 )

:root {
	@include generate-font-scales($config);
}

Also we can be more specific and use the $prefix-class, $prefix-variable and $suffix-class, $suffix-variable to target utility classes and css variables differently.
The prefix can be whatever string we want it to be.
The suffix has many options coming from the $map-for-suffixes map.
We can create our own suffixes as arglist i.g (a1, a2, a3, etc...) or we can define numeric(1, 2, 3, etc.) or numeric-hundreds(100, 200, 300, etc...) suffix.

NOTE: Prefix and suffixes won't work with having an $src type of map, because the map keys will be used as prefix and suffix.


/////////////////////////////////
Example 7: Using same config map for the generate-font-scales and generate-space-scales mixins.
The keys 'font-scales' and 'space-scales' are very important to distinguish between the two mixins.

$config : (
	'font-scales' : (
		'base' : 5rem,
		'ratio' : 1.5,
		'length' : 10,
		'prefix' : 'text-',
		'suffix' : 'roman',
	),
	'space-scales' : (
		'src' : $list-1,
		'break-at': max,
		'breakpoints' : (
			tablet-md: $list-2,
			phone-lg: $list-3,
		),
		'prefix-class' : 'space-class-',
		'suffix' : 'numeric-hundreds',
	),
)

:root {
	@include generate-font-scales($config);
	@include generate-space-scales($config);
}


/////////////////////////////////
Example 8: Now let's use the same config but using generator mixin. From this mixin will be called the generate-font-scales and generate-space-scales mixins.

$config : (
	'font-scales' : (
		'base' : 5rem,
		'ratio' : 1.5,
		'length' : 10,
		'prefix' : 'text-',
		'suffix' : 'roman',
	),
	'space-scales' : (
		'src' : $list-1,
		'break-at': max,
		'breakpoints' : (
			tablet-md: $list-2,
			phone-lg: $list-3,
		),
		'prefix-class' : 'space-class-',
		'suffix' : 'numeric-hundreds',
	),
)

:root {
	@include generator($config);
}

 */

