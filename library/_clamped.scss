@charset "UTF-8";
@use "sass:math";

/**
 * Returns a clamp function with minimum and maximum value based on the breakpoint values.
 *
 * @author - Aleksandr Hovhannisyan (https://www.aleksandrhovhannisyan.com/blog/fluid-type-scale-with-css-clamp/)
 *
 * I have modified the original function to work with multiple units and print out errors if function is called with invalid parameters.
 *
 * @example
 * clamped(1rem, 3rem, 20em, 65em) => clamp(1rem, 2.78vw + 0.11rem, 3rem);
 * clamped(1rem, 3rem) => clamp(1rem, 1.88vw + 0.3rem, 3rem);
 * @overload clamped($min-value, $max-value, $min-breakpoint: map-get($map-for-breakpoints, "screen-xs"), $max-breakpoint: map-get($map-for-breakpoints, "screen-xl"))
 * @param $min-value {number} - Minimum value.
 * @param $max-value {number} - Maximum value.
 * @param $min-breakpoint {number} - Minimum breakpoint value.
 * @param $max-breakpoint {number} - Maximum breakpoint value.
 * @return clamp function.
 */
@function clamped($min-value, $max-value, $min-breakpoint: map-get($map-for-breakpoints, "screen-xs"), $max-breakpoint: map-get($map-for-breakpoints, "screen-lg")) {
	$value-unit : null;
	$breakpoint-unit : null;

	@if type-of($min-breakpoint) == string {
		$min-breakpoint : map-get($map-for-breakpoints, $min-breakpoint);
	}

	@if type-of($max-breakpoint) == string {
		$max-breakpoint : map-get($map-for-breakpoints, $max-breakpoint);
	}

	@if type-of($min-value) != number or type-of($max-value) != number or type-of($min-breakpoint) != number or type-of($max-breakpoint) != number {
		@error "Invalid type: parameters $min-value, $max-value, $min-breakpoint and $max-breakpoint must be numbers.";
	}

	@if unitless($min-value) or unitless($max-value) or unitless($min-breakpoint) or unitless($max-breakpoint) {
		@error "Invalid type: parameters $min-value, $max-value, $min-breakpoint and $max-breakpoint must be numbers with units.";
	}

	@if unit($min-value) == unit($max-value) {
		$value-unit : unit($min-value);
	} @else {
		@error "Invalid unit: parameters $min-value and $max-value must have the same unit.";
	}

	@if unit($min-breakpoint) == unit($max-breakpoint) {
		$breakpoint-unit : unit($min-breakpoint);
	} @else {
		@error "Invalid unit: parameters $min-breakpoint and $max-breakpoint must have the same unit.";
	}

	$min-value : _convert-to-number(_string-replace($min-value, $value-unit));
	$max-value : _convert-to-number(_string-replace($max-value, $value-unit));
	$min-breakpoint : _convert-to-number(_string-replace($min-breakpoint, $breakpoint-unit));
	$max-breakpoint : _convert-to-number(_string-replace($max-breakpoint, $breakpoint-unit));

	@if $breakpoint-unit == em {
		$min-breakpoint : $min-breakpoint * $agent-default-font-size;
		$max-breakpoint : $max-breakpoint * $agent-default-font-size;
	} @else if $breakpoint-unit == rem {
		$min-breakpoint : $min-breakpoint * $author-default-font-size;
		$max-breakpoint : $max-breakpoint * $author-default-font-size;
	}

	$slope : math.div($max-value - $min-value, $max-breakpoint - $min-breakpoint);
	$slope-vw : _number-round($slope * 1000, 2);
	$intercept-rems : _number-round($min-value - $slope * $min-breakpoint, 2);
	@return clamp(#{$min-value}#{$value-unit}, #{$slope-vw}vw + #{$intercept-rems}#{$value-unit}, #{$max-value}#{$value-unit});
}