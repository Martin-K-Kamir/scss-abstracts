@charset "UTF-8";

/**
 * Mixin to generate utility classes from a map.
 *
 * NOTE: This mixin is also used in the 'generator' mixin.
 * NOTE: This mixin is similar to the 'generate-properties' mixin, but it generates css properties instead of utility classes.
 *
 * @author - Martin Kam√≠r
 *
 * @param $params {map/string} - Parameter accepts multiple maps to generate classes from or a string such as 'predefined'
 * to generate predefined classes or accepts 'config' to generate classes from the config map.
 *
 * Example of config:
 * $config : ( - Name of the map must be always 'config'
 *  	'classes' : ( - Important key from this key the 'generator' mixin will know call this mixin.
 *  		'predefined' : {boolean} - If true, predefined css properties will be generated.
 *  		'src' : {list} - List of maps to generate css properties from.
 *  	),
 * );
 */
@mixin generate-classes($params...) {
	$property     : null;
	$auto-margins : false;
	$i            : 0;

	@if $params == (config,) {
		$params : map-get($config, 'classes');
	}

	// If the $params is a string 'predefined' or $predefined is true from config, generate predefined css properties.
	@if $params == (predefined,) or $params == 'predefined' {
		$params : ($map-for-font-weights, $map-for-letter-spacings, $map-for-line-heights, $map-for-shadows);
	}

	// Main loop to output css properties.
	@each $param in $params {
		$map : $param;

		// Check if the map has a key 'property'. If so add the property value to the $property variable and remove it from the map.
		@if map-has-key($map, 'property') {
			$property : map-get($map, 'property');
			$map      : map-remove($map, 'property');

			@if $property == 'auto-margins' {
				$auto-margins : true;
			}
		}

		// Remove the 'shadow-color' key from the map.
		@if map-has-key($map, 'shadow-color') {
			$map : map-remove($map, 'shadow-color');
		}

		// Remove the 'shadow-strength' key from the map.
		@if map-has-key($map, 'shadow-strength') {
			$map : map-remove($map, 'shadow-strength');
		}

		@if $auto-margins == true {
			@each $key, $property in $map {
				@at-root .#{$key} {
					#{$property} : auto;
				}

				@each $screen, $breakpoint in $map-for-breakpoints {
					@at-root .#{$key}\/#{$screen} {
						@include breakpoint(max, $breakpoint) {
							#{$property} : auto;
						}
					}
				}

				$i : $i + 1;
				@if $i == length($map) {
					$auto-margins : false;
				}
			}
		} @else {
			@each $key, $value in $map {
				@at-root .#{$key} {
					#{$property} : var(--#{$key});
				}
			}
		}

	}
}