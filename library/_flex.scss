@charset "UTF-8";

/// Ultimate flexbox mixin
/// @author Martin KamÃ­r
///
/// @param {string / number}
/// Mixin accepts multiple parameters.
///
/// `justify-center`, `justify-start`, `justify-end`, `justify-between`,
/// `justify-around`, `justify-evenly`, `justify-unset`, `justify-initial`,
/// `justify-revert` - Sets justify-content property.
///
/// `align-center`, `align-start`, `align-end`, `align-unset`, `align-initial`,
/// `align-revert` - Sets align-content property.
///
/// Parameters accepts all values for flex-direction, flex-wrap property.
///
/// Number as parameter sets gap.
/// TIP: To make gaps possible in older browser. Mixin needs to know their flex-direction.
///
/// Parameter accepts custom layout styles as `even-column`, `navbar`, `aside-left`, `aside-right`.
/// These layouts can be modified by calling other parameters above.
///
/// Parameter `fluid-grid` makes flexbox fluid grid.
/// Which can be modified by calling `col-2`, `col-3`, `col-4`, `col-5`, `col-6`, `col-8`, `col-12`
/// As default `fluid-grid` is set to be `col-3`. Layout can be modified by calling other parameters above.
///
@mixin flex($params...) {
  // Default properties
  $main-size: 60%;
  $aside-size: 20rem;
  $ideal-size: 40rem;
  $justify: null;
  $align: null;
  $direction: null;
  $wrap: null;
  $content: null;
  $gap: 0px;
  $col-width-max: __mapDeepGet($map-for-flexbox, 'grid-widths', 'col-width-max');
  $col-width-md: __mapDeepGet($map-for-flexbox, 'grid-widths', 'col-width-md');
  $col-width-sm: __mapDeepGet($map-for-flexbox, 'grid-widths', 'col-width-sm');
  $col-width-min: __mapDeepGet($map-for-flexbox, 'grid-widths', 'col-width-min');

  // Loop over the parameters to set col width properties for fluid grid based on the call. As default fluid grid is set to be cols-3.
  @each $value in $params {
    @if $value == 'cols-2' {
      $col-width-max: 50%;
      $col-width-md: 50%;
      $col-width-sm: 100%;
    } @else if $value == 'cols-3' {
      $col-width-max: 33.33%;
      $col-width-md: 50%;
      $col-width-sm: 100%;
    } @else if $value == 'cols-4' {
      $col-width-max: 25%;
      $col-width-md: 33.33%;
      $col-width-sm: 50%;
    } @else if $value == 'cols-5' {
      $col-width-max: 20%;
      $col-width-md: 25%;
      $col-width-sm: 33.33%;
    } @else if $value == 'cols-6' {
      $col-width-max: 16.66%;
      $col-width-md: 25%;
      $col-width-sm: 33.33%;
      $col-width-min: 50%;
    } @else if $value == 'cols-8' {
      $col-width-max: 12.5%;
      $col-width-md: 20%;
      $col-width-sm: 33.33%;
      $col-width-min: 50%;
    } @else if $value == 'cols-12' {
      $col-width-max: 8.3%;
      $col-width-md: 16.66%;
      $col-width-sm: 25%;
      $col-width-min: 50%;
    }
  }

  // Main loop. Which makes the mixin to work.
  @each $value in $params {
    // Check for string in the parameters. Based on params properties will do lookup in flexbox map to get their value.
    @if type-of($value) == 'string' {
      $justify: __mapDeepGet($map-for-flexbox, 'justify', $value);
      $align: __mapDeepGet($map-for-flexbox, 'align', $value);
      $direction: __mapDeepGet($map-for-flexbox, 'directions', $value);
      $wrap: __mapDeepGet($map-for-flexbox, 'wrap', $value);
      $content: __mapDeepGet($map-for-flexbox, 'content', $value);
    }

    // Check for number in the parameters. If there is number set gap value and call for __supportGap so in older browsers there will be gap aswell.
    @if type-of($value) == 'number' {
      $gap: $value;
      @include __supportGap($gap, $direction);
    }

    // Sets the values
    justify-content: $justify;
    align-content: $content;
    align-items: $align;
    flex-direction: $direction;
    flex-wrap: $wrap;
  }

  // Loop If else chain for custom flex layouts
  @each $value in $params {
    // Center on main axis and cross axies
    @if $value == 'center-all' {
      justify-content: center;
      align-items: center;

      // Even columns
    } @else if $value == 'even-columns' {
      justify-content: center;
      flex-direction: row;

      & > * {
        flex-basis: 100%;
      }

      // Fluid grid system which can be modified by second parameter (col-2, col-3, col-4, etc...)
    } @else if $value == 'fluid-grid' {
      flex-wrap: wrap;

      & > * {
        flex: 1;
        min-width: calc(#{$col-width-max} - #{$gap});

        @media (max-width: $tablet-lg) {
          min-width: calc(#{$col-width-md} - #{$gap});
        }

        @media (max-width: $tablet-min) {
          min-width: calc(#{$col-width-sm} - #{$gap});
        }

        @media (max-width: $phone-sm) {
          min-width: calc(#{$col-width-min} - #{$gap});
        }
      }

      // Navbar which apply styles to the ul. To order to work the mixin have to be called in container/parent div
    } @else if $value == 'navbar' {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: $gap;
    } @else if $value == 'aside-left' {
      & > *:nth-child(2) {
        flex-grow: 9999;
        flex-basis:$main-size;
      }

      & > *:nth-child(1) {
        flex-basis: $aside-size;
        flex-grow: 1;
      }
    } @else if $value == 'aside-right' {

      & > *:nth-child(1) {
        flex-grow: 9999;
        flex-basis:$main-size;
      }

      & > *:nth-child(2) {
        flex-basis: $aside-size;
        flex-grow: 1;
      }
    } @else if $value == 'fluid-columns' {
      flex-wrap: wrap;

      & > * {
        flex-grow: 1;
        flex: calc(calc(40rem - 10%) * 999)
      }
    }
  }

  display: flex; //! Never delete this. Don't ask why.
}
