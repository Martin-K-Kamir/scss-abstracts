@charset "UTF-8";

/**
 * Flexbox mixin to shorten the flexbox properties.
 *
 * @author Martin KamÃ­r
 *
 * @param {string / number} - Mixin accepts multiple parameters.
 * For justify-content property, we define in mixin the following values: justify-center, justify-start, justify-end, justify-between, justify-around, justify-evenly, justify-unset, justify-initial, justify-revert.
 * For align-items property, we define in mixin the following values: align-center, align-start, align-end, align-stretch, align-unset, align-initial, align-revert.
 * For align-content property, we define in mixin the following values: content-center, content-start, content-end, content-stretch, content-between, content-around, content-evenly, content-unset, content-initial, content-revert.
 * For flex-direction property, we define in mixin the following values: row, row-reverse, column, column-reverse, direction-unset, direction-initial, direction-revert.
 * For flex-wrap property, we define in mixin the following values: wrap, wrap-reverse, nowrap, wrap-unset, wrap-initial, wrap-revert.
 *
 * Mixin also accepts the following special parameters:
 * - center - to center in main axis and cross axis.
 * - even-columns - to evenly distribute columns.
 * - grid - to create a flexbox grid. Specifying number of columns we define these parameters: cols-2, cols-3, cols-4, cols-5, cols-6, cols-8, cols-12.
 *
 * To make gaps we define number in mixin parameter.
 */
@mixin flex($params...) {
	// Defining variables.
	$justify       : null;
	$align         : null;
	$direction     : null;
	$wrap          : null;
	$content       : null;
	$gap           : 0;
	$col-width-max : _map-deep-get($map-for-flexbox, 'grid-widths', 'col-width-max');
	$col-width-md  : _map-deep-get($map-for-flexbox, 'grid-widths', 'col-width-md');
	$col-width-sm  : _map-deep-get($map-for-flexbox, 'grid-widths', 'col-width-sm');
	$col-width-min : _map-deep-get($map-for-flexbox, 'grid-widths', 'col-width-min');

	// Looking for cols-* parameter. If found, we set the widths of columns.
	@each $value in $params {
		@if $value == 'cols-2' {
			$col-width-max : 50%;
			$col-width-md  : 50%;
			$col-width-sm  : 100%;
		} @else if $value == 'cols-3' {
			$col-width-max : 33.33%;
			$col-width-md  : 50%;
			$col-width-sm  : 100%;
		} @else if $value == 'cols-4' {
			$col-width-max : 25%;
			$col-width-md  : 33.33%;
			$col-width-sm  : 50%;
		} @else if $value == 'cols-5' {
			$col-width-max : 20%;
			$col-width-md  : 25%;
			$col-width-sm  : 33.33%;
		} @else if $value == 'cols-6' {
			$col-width-max : 16.66%;
			$col-width-md  : 25%;
			$col-width-sm  : 33.33%;
			$col-width-min : 50%;
		} @else if $value == 'cols-8' {
			$col-width-max : 12.5%;
			$col-width-md  : 20%;
			$col-width-sm  : 33.33%;
			$col-width-min : 50%;
		} @else if $value == 'cols-12' {
			$col-width-max : 8.3%;
			$col-width-md  : 16.66%;
			$col-width-sm  : 25%;
			$col-width-min : 50%;
		}
	}

	// The main loop to set the flexbox properties.
	@each $value in $params {

		// If defined parameter is string. Get the value from the map if it corresponds with the value.
		@if meta.type-of($value) == 'string' {
			$justify   : _map-deep-get($map-for-flexbox, 'justify', $value);
			$align     : _map-deep-get($map-for-flexbox, 'align', $value);
			$direction : _map-deep-get($map-for-flexbox, 'directions', $value);
			$wrap      : _map-deep-get($map-for-flexbox, 'wrap', $value);
			$content   : _map-deep-get($map-for-flexbox, 'content', $value);
		}

		// The output of the mixin.
		justify-content : $justify;
		align-content   : $content;
		align-items     : $align;
		flex-direction  : $direction;
		flex-wrap       : $wrap;

		// If defined parameter is number. Set the gap.
		@if meta.type-of($value) == 'number' {
			$gap : $value;
			gap  : $gap;
		}
	}

	// The second main loop to output the special parameters.
	@each $value in $params {
		@if $value == 'center' {
			// Centering in main axis and cross axis.
			justify-content : center;
			align-items     : center;

		} @else if $value == 'even-columns' {
			// Evenly distribute columns.
			justify-content : center;
			flex-direction  : row;

			& > * {
				flex-basis : 100%;
			}

		} @else if $value == 'grid' {
			// Create a flexbox grid.
			flex-wrap       : wrap;

			& > * {
				flex      : 1;
				min-width : calc(#{$col-width-max} - #{$gap});

				@media (max-width : $tablet-lg) {
					min-width : calc(#{$col-width-md} - #{$gap});
				}

				@media (max-width : $tablet-min) {
					min-width : calc(#{$col-width-sm} - #{$gap});
				}

				@media (max-width : $phone-sm) {
					min-width : calc(#{$col-width-min} - #{$gap});
				}
			}
		}
	}

	display        : flex;
}
