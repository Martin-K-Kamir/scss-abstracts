@charset "UTF-8";

/**
 * Returns string of suffix based on current $i in the loop.
 *
 * NOTE: This function is a building block for the generated scalable system functionality, which controls the outputted suffix.
 *
 * @author - Martin KamÃ­r
 *
 * @example
 * _get-suffix(numeric, 5, 2) => 2;
 * _get-suffix(numeric-hundreds, 5, 2) => 200;
 * _get-suffix((a1, a2, a3, a4, a5), 5, 2) => a2;
 * _get-suffix(roman, 5, 2) => II;
 * _get-suffix(nato, 5, 2) => Bravo;
 * _get-suffix(size, 5, 2) => Small;
 * _get-suffix(size-shorted-minmax, 5, 2) => sm;
 * _get-suffix(size-x-minmax, 5, 1) => min;
 * @overload _get-suffix($suffix: 'numeric', $length,  $i)
 * @param $suffix {string} - As default set to numeric. Based on the suffix value, the function returns the corresponding suffix.
 * @param $length {number} - The length of the list.
 * @param $i {number} - The current index in loop.
 * @return string - The suffix.
 */
@function _get-suffix($suffix: 'numeric', $length,  $i) {
	@if ($suffix == 'numeric') {
		@return $i; // Returns the current number based on the index.

	} @else if ($suffix == 'numeric-hundreds') {
		@return $i + '00'; // Returns the current number based on the index and adds '00' to the end.

	} @else if (meta.type-of($suffix) == 'list') {
		@return list.nth($suffix, $i); // Returns value from custom list based on current $i.

	} @else if (list.index(('roman', 'greek', 'military', 'planets', 'nato', 'alphabet', 'alphabet-upper', 'primary'), $suffix)) {
		@return list.nth(map.get($map-for-suffixes, $suffix), $i); // Returns value from premade list based on current $i.

	} @else if (list.index(('size', 'size-minmax', 'size-shorted', 'size-shorted-minmax', 'size-x', 'size-x-minmax', 'size-gradation', 'size-gradation-minmax', 'size-and-number', 'size-and-number-minmax', 'size-and-x', 'size-and-x-minmax'), $suffix)) {

		// Map which holds corresponding suffixes of sizes.
		$map-of-suffixes : (
				'size' : _create-suffix-list($suffix, $length),
				'size' : _create-suffix-list($suffix, $length),
				'size-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-shorted' : _create-suffix-list($suffix, $length),
				'size-shorted-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-x' : _create-suffix-list($suffix, $length),
				'size-x-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-gradation' : _create-suffix-list($suffix, $length),
				'size-gradation-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-and-number' : _create-suffix-list($suffix, $length),
				'size-and-number-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-and-x' : _create-suffix-list($suffix, $length),
				'size-and-x-minmax' : _create-suffix-list($suffix, $length, $minmax : true)
		);

		// Loop over the map and check if $suffix corresponding with $key
		@each $key, $list-of-suffixes in $map-of-suffixes {
			@if ($suffix == $key) {
				@return list.nth($list-of-suffixes, $i); // Returns value from premade list based on current $i.
			}
		}
	} @else {
		@error 'Invalid suffix type of #{$suffix}. Valid types are: #{_map-keys($map-for-suffixes)}';
	}
}
