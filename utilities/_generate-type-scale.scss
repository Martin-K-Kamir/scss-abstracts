@charset "UTF-8";

@function clap($value) {
	@debug  #{$value};
	  @return #{$value};
}
/**
 * Generates css properties of given parameters in config.
 *
 * NOTE: This function is main building block for the generated scalable system functionality, which controls generating the css properties.
 *
 * @author - Martin KamÃ­r
 *
 */
@mixin _generate-type-scale($config) {
	// Getting all the values from the config map.
	$key             : map.get($config, 'key');
	$selector        : map.get($config, 'selector');
	$base            : map.get($config, 'base');
	$ratio           : map.get($config, 'ratio');
	$length          : map.get($config, 'length');
	$preserve        : map.get($config, 'preserve');
	$utility-classes : map.get($config, 'utility-classes');
	$src             : map.get($config, 'src');
	$break-at        : map.get($config, 'break-at');
	$breakpoints     : map.get($config, 'breakpoints');
	$scale           : map.get($config, 'scale');
	$prefix          : map.get($config, 'prefix');
	$prefix-class    : map.get($config, 'prefix-class');
	$prefix-variable : map.get($config, 'prefix-variable');
	$suffix          : map.get($config, 'suffix');
	$suffix-class    : map.get($config, 'suffix-class');
	$suffix-variable : map.get($config, 'suffix-variable');



	// Sets all variables to be used in the mixin.
	$src-length      : list.length($src);
	$src-type        : meta.type-of($src);
	$ratio           : _validate-ratio($ratio);
	$prefix          : _get-name($prefix, $prefix-variable);
	$suffix          : _get-name($suffix, $suffix-variable);
	$_suffix         : null;
	$_prefix         : null;
	$keys            : null;
	$suffix-prev     : null;
	$value           : null;

	// If base is used generate the base and ratio css properties with a given prefix.
	@if $base != null {
		--#{$prefix}ratio : #{$ratio};
		--#{$prefix}base  : #{$base};
	}

	// If $src is a map convert keys and values to a list and set the values length variable.
	@if $src-type == map {
		$keys       : to-list($src, 'keys');
		$src        : to-list($src, 'values');
		$src-length : list.length($src);
	}

	// Main loop for generating the css properties.
	@for $i from 1 through if($length != null, $length, $src-length) {

		// Shallow copies of $suffix and $prefix variables.
		$_prefix : _get-name($prefix, $prefix-variable); // Get the prefix name.
		$_suffix : _get-suffix($suffix, $length, $i); // Get the suffix for the current iteration.

		// If $base is used
		@if $base != null {
			$value : calc(var(--#{$prefix}base) * var(--#{$prefix}ratio)); // In first iteration output calculation of the base value multiplied by the ratio.

			// In other iterations calculate the base value multiplied by the ratio and use the previous value.
			@if $i > 1 {
				$suffix-prev : _get-suffix($suffix, $length, $i - 1); // Get the suffix for the previous iteration.
				$value       : calc(var(--#{$prefix}#{$suffix-prev}) * var(--#{$prefix}ratio)); // Output the calculation of value which is based on $prefix and $suffix-prev multiplied by the ratio.
			}

			// If $preserve is used get the value by _get-value function.
			@if $preserve > 1 {
				$value : _get-value($base, $ratio, $preserve, $i, $prefix);

				@if $i > 1 {
					$value : _get-value($base, $ratio, $preserve, $i, $prefix, $suffix-prev);
				}
			}
		}

		// If $src is a list or map
		@if $src-type == list or $src-type == map {
			$_suffix : _get-suffix($suffix, $src-length, $i);
			$value   : _number-scale(list.nth($src, $i), $scale); // Get the value from the list at the current iteration and scale it if used.
		}

		// If $src is a map
		@if $src-type == map {
			$_prefix : list.nth($keys, $i); // Get the key from the list at the current iteration.
			$_suffix : ''; // Since the map is used the suffix is empty, because the key is used as the prefix and suffix.
		}

		// The actual css property which is outputted.
		@include _variable-shell($_prefix, $_suffix, $value);

		// If utility-classes are set to true generate the utility classes based on the prefix, suffix, value and selector.
		@if ($utility-classes) {
			@at-root .#{_class-shell(if($src-type == map, $_prefix, _get-name($prefix, $prefix-class)), _get-suffix(if($src-type == map, $_suffix, _get-name($suffix, $suffix-class)), $src-length, $i))} {
				@include _declaration-shell($_prefix, $_suffix, $value, $selector);
			}
		}
	}

	// If $break-at is used generate breakpoints with css properties.
	@if ($break-at != null) {
		@for $i from 1 through list.length($breakpoints) {
			$breakpoint : list.nth(list.nth($breakpoints, $i), 1); // Get the breakpoint value.
			$src        : list.nth(list.nth($breakpoints, $i), 2); // Get the src value.
			$src-type   : meta.type-of(list.nth(list.nth($breakpoints, $i), 2)); // Get the src type.

			// If $src is a map convert keys and values to a list.
			@if $src-type == map {
				$keys : to-list($src, 'keys');
				$src  : to-list($src, 'values');
			}

			// The actual outputted breakpoint
			// The $break-at value must be one of the breakpoints in $map-for-breakpoints.
			@include breakpoint($break-at, $breakpoint) {
				$x : 1; // Second iteration of the loop.
				$y : $src-length - list.length($src) + 1; // Third iteration of the loop. Which starts by getting the difference between the length of the src and the length of the main loop current iteration.

				@while $y <= $src-length {
					$_prefix : _get-name($prefix, $prefix-variable); // Get the prefix name.
					$_suffix : _get-suffix($suffix, $src-length, $y); // Get the suffix for the current iteration of $y.
					$value   : _number-scale(list.nth($src, $x), $scale); // Get the value from the list at the current iteration of $x and scale it if used.

					// If $src is a map
					@if $src-type == map {
						$_prefix : list.nth($keys, $x); // Get the key from the list at the current iteration.
						$_suffix : ''; // Since the map is used the suffix is empty, because the key is used as the prefix and suffix.

						// If the key is ratio
						@if $_prefix == 'ratio' {
							$_prefix : $prefix; // Use the prefix instead of the key.
							$_suffix : 'ratio'; // Use string 'ratio' as the suffix.
							$value   : _validate-ratio(list.nth($src, $x)); // Validate the ratio and get the value.
						}
					}

					// The actual css property which is outputted in the breakpoint.
					@include _variable-shell($_prefix, $_suffix, $value);

					// At the end of the loop increment $x and $y.
					$y       : $y + 1;
					$x       : $x + 1;
				}
			}
		}
	}

	// Generate stack classes if key is 'spaces' and utility-classes are set to true.
	@if $key == 'spaces' and $utility-classes == true {
		@at-root .stack {
			display : grid;
			gap     : var(--#{if($prefix != null, $prefix, 'space')});;
		}
		@at-root .stack > * {
			margin : 0;
		}
	}
}

;
