@charset "UTF-8";

/**
 * Mixin for generating the color values.
 *
 * @author - Martin Kam√≠r
 *
 */
@mixin _generate-colors($config, $map, $enabled-classes) {
	$tints             : map-get($config, 'tints');
	$shades            : map-get($config, 'shades');
	$hsl-formatting    : map-get($config, 'hsl');
	$prefix-text       : map-get($config, 'prefix-text');
	$prefix-background : map-get($config, 'prefix-background');
	$suffix            : map-get($config, 'suffix');
	$suffix            : map-get($config, 'suffix');
	$utility-classes   : map-get($config, 'utility-classes');

	// If $enabled-classes is false then the $utility-classes will be false too, This statement is used to avoid generating the same utility classes but for a dark or light color scheme.
	@if $enabled-classes == false {
		$utility-classes : false;
	}

	$_suffix           : '';
	$colors-list       : ();

	@each $key, $value in $map {

		// Mechanism for generating the color properties with a suffix that relies on a number-based list of suffixes. Such as 'roman', 'nato', 'numeric', 'numeric-hundreds', custom list of suffixes, etc.
		@if $suffix != null and $suffix != 'color-adjectives' {

			// If tints are defined then based on the percentage values of tints get the value and append it to the colors-list.
			@if $tints != null {
				@for $x from 1 through length($tints) {
					$_value      : _get-hsl(mix(white, $value, nth($tints, $x)), $hsl-formatting);
					$colors-list : append($colors-list, $_value);
				}
			}

			// Get the default value from the $src map. Append it to the colors-list in middle. So the tints will be at the start default value at the middle and the shades at the end.			// Get the default value from the $src map. Append it to the colors-list at middle. So the tints will be at start default value at the middle and the shades at the end.
			$_value      : _get-hsl($value, $hsl-formatting);
			$colors-list : append($colors-list, $_value);

			// If shades are defined then based on the percentage values of shades get the value and append it to the colors-list.
			@if $shades != null {
				@for $x from 1 through length($shades) {
					$_value      : _get-hsl(mix(black, $value, nth($shades, $x)), $hsl-formatting);
					$colors-list : append($colors-list, $_value);
				}
			}

			// Loop for outputting the color values from the colors-list and generating the utility classes.
			@for $x from 1 through length($colors-list) {
				$_suffix : '-#{_get-suffix($suffix, length($colors-list), $x)}';
				$value   : nth($colors-list, $x);

				@include _variable-shell($key, $_suffix, $value);
				@include _generate-color-utilities($utility-classes, $prefix-text, $prefix-background, $key, $_suffix, $value);
			}
		}

		// Mechanism for generating the color properties with 'color-adjectives' suffix.
		@if $suffix == 'color-adjectives' {

			// Generate tint color properties and utility classes.
			@if $tints != null {
				@for $x from 1 through length($tints) {
					$_value  : _get-hsl(mix(white, $value, nth($tints, $x)), $hsl-formatting);
					$_suffix : '-#{_get-suffix($suffix, length($tints), $x, 'lighter-values')}';

					@include _variable-shell($key, $_suffix, $_value);
					@include _generate-color-utilities($utility-classes, $prefix-text, $prefix-background, $key, $_suffix, $value);
				}
			}

			// Generate the default color properties and utility classes.
			$_value  : _get-hsl($value, $hsl-formatting);
			$_suffix : '';

			@include _variable-shell($key, $_suffix, $_value);
			@include _generate-color-utilities($utility-classes, $prefix-text, $prefix-background, $key, $_suffix, $value);

			// Generate shade color properties and utility classes.
			@if $shades != null {
				@for $x from 1 through length($shades) {
					$_value  : _get-hsl(mix(black, $value, nth($shades, $x)), $hsl-formatting);
					$_suffix : '-#{_get-suffix($suffix, length($shades), $x, 'darker-values')}';

					@include _variable-shell($key, $_suffix, $_value);
					@include _generate-color-utilities($utility-classes, $prefix-text, $prefix-background, $key, $_suffix, $value);
				}
			}
		}

		// Mechanism for generating the color properties with no suffix. Mainly used for generating the color pallet from $src.
		@if $suffix == null {
			@include _variable-shell($key, $_suffix, $value);
			@include _generate-color-utilities($utility-classes, $prefix-text, $prefix-background, $key, $_suffix, $value);
		}

		// At the end of the loop, clear the colors-list. To avoid generating the same color properties again.
		$colors-list : ();
	}
}
