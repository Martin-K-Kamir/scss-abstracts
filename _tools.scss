@charset "UTF-8";
@use "sass:math";

/**
 * Function returns number with a type of number.
 *
 */
@function _convert-to-number($value) {
	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		@error 'Value for `_convert-to-number` should be a number or a string.';
	}

	$result : 0;
	$digits : 0;
	$minus : str-slice($value, 1, 1) == '-';
	$numbers : ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character : str-slice($value, $i, $i);

		@if (index(map-keys($numbers), $character) or $character == '.') {
			@if $character == '.' {
				$digits : 1;
			} @else if $digits == 0 {
				$result : $result * 10 + map-get($numbers, $character);
			} @else {
				$digits : $digits * 10;
				$result : $result + math.div(map-get($numbers, $character), $digits);
			}
		}
	}

	@return if($minus, -$result, $result);
}

/**
 * Function returns new string with replaced a substring with another string.
 *
 * @author - Kitty Giraudel - https://css-tricks.com/snippets/sass/str-replace-function/
 *
 */
@function _string-replace($value, $search, $replace: '') {
	$string : #{$value};
	$index : str-index(#{$string}, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + _string-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

/**
 * Function returns a rounded number based on $places parameter.
 *
 */
@function _number-round($number, $places: 0) {
	$n : 1;
	@if $places > 0 {
		@for $i from 1 through $places {
			$n : $n * 10;
		}
	}
	@return math.div(round($number * $n), $n);
}


