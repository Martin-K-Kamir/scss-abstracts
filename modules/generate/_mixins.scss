@charset "UTF-8";
@use 'sass:list' as *;
@use 'sass:map' as *;
@use 'sass:math' as *;
@use '../list' as *;
@use '../math' as *;
@use 'functions' as *;
@use 'variables' as *;
@forward 'variables';


@mixin config($config, $mixin, $property, $base, $ratio, $length, $preserve, $utils, $src, $prefix, $suffix) {

	// Create local private config from parameters.
	$_config : (
			'mixin': $mixin,
			'property' : $property,
			'base' : $base,
			'ratio' : $ratio,
			'length' : $length,
			'preserve' : $preserve,
			'utils' : $utils,
			'src' : $src,
			'prefix' : $prefix,
			'suffix' : $suffix,
			'break-at' : 'max', // refactor
	);

	// If config is not null, merge the config with the local private config.
	@if $config != null {
		$_config : deep-merge($_config, map-get($config, $mixin));
	}

	@include _generate-types-scale($_config)
}

@mixin process-colors($config) {
	$src              : map-get($config, 'src');
	$src-scheme       : map-get($config, 'src-scheme');
	$preferred-scheme : map-get($config, 'preferred-scheme');
	$dark-scheme      : false;
	$map              : $src;

	@for $i from 1 through if($src-scheme == null, 1, 2) {

		@if length($src) == 1 {
			@if $src-scheme != null and $i > length($map) {
				$map         : $src-scheme;
				$dark-scheme : true;
			}
		} @else {
			@if $src-scheme != null and $i >= length($map) {
				$map         : $src-scheme;
				$dark-scheme : true;
			}
		}

		@if $dark-scheme == false {
			@include _generate-colors($config, $map, true);
		} @else {
			@media (prefers-color-scheme : #{$preferred-scheme}) {
				@include _generate-colors($config, $map, false);
			}
		}
	}
}

@mixin _generate-colors($config, $map, $allowed-utils) {
	$tints             : map-get($config, 'tints');
	$shades            : map-get($config, 'shades');
	$format            : map-get($config, 'format');
	$prefix-text       : map-get($config, 'prefix-text');
	$prefix-background : map-get($config, 'prefix-background');
	$suffix            : map-get($config, 'suffix');
	$utils             : map-get($config, 'utils');

	$tints : list-reverse($tints);

	@if $allowed-utils == false {
		$utils : false;
	}

	$_suffix           : '';
	$colors-list       : ();

	@each $key, $value in $map {

		@if $tints != null {
			@for $x from 1 through length($tints) {
				$_value      : _get-hsl(mix(white, $value, nth($tints, $x)), $format);
				$colors-list : append($colors-list, $_value);
			}
		}

		$_value      : _get-hsl($value, $format);
		$colors-list : append($colors-list, $_value);

		@if $shades != null {
			@for $x from 1 through length($shades) {
				$_value      : _get-hsl(mix(black, $value, nth($shades, $x)), $format);
				$colors-list : append($colors-list, $_value);
			}
		}

		@for $x from 1 through length($colors-list) {
			$_suffix             : '-#{get-suffix($suffix, length($colors-list), $x)}';
			$value               : nth($colors-list, $x);

			--#{$key}#{$_suffix} : #{$value};

			@if $utils {
				@at-root .#{$prefix-text}#{$key}#{$suffix} {
					color : var(--#{$key}#{$suffix});
				}
				@at-root .#{$prefix-background}#{$key}#{$suffix} {
					background-color : var(--#{$key}#{$suffix});
				}
			}
		}

		@if false {
			@if $tints != null {
				@for $x from 1 through length($tints) {
					$_value              : _get-hsl(mix(white, $value, nth($tints, $x)), $format);
					$_suffix             : '-#{get-suffix($suffix, length($tints), $x, 'lighter-values')}';

					--#{$key}#{$_suffix} : #{$_value};

					@if $utils {
						@at-root .#{$prefix-text}#{$key}#{$_suffix} {
							color : var(--#{$key}#{$_suffix});
						}
						@at-root .#{$prefix-background}#{$key}#{$_suffix} {
							background-color : var(--#{$key}#{$_suffix});
						}
					}
				}
			}

			$_value              : _get-hsl($value, $format);
			$_suffix             : '';

			--#{$key}#{$_suffix} : #{$_value}; // The css custom property generated

			@if $utils {
				@at-root .#{$prefix-text}#{$key}#{$_suffix} {
					color : var(--#{$key}#{$_suffix});
				}
				@at-root .#{$prefix-background}#{$key}#{$_suffix} {
					background-color : var(--#{$key}#{$_suffix});
				}
			}

			@if $shades != null {
				@for $x from 1 through length($shades) {
					$_value              : _get-hsl(mix(black, $value, nth($shades, $x)), $format);
					$_suffix             : '-#{get-suffix($suffix, length($shades), $x, 'darker-values')}';

					--#{$key}#{$_suffix} : #{$_value}; // The css custom property generated


					@if $utils {
						@at-root .#{$prefix-text}#{$key}#{$_suffix} {
							color : var(--#{$key}#{$_suffix});
						}
						@at-root .#{$prefix-background}#{$key}#{$_suffix} {
							background-color : var(--#{$key}#{$_suffix});
						}
					}
				}
			}
		}

		$colors-list : ();
	}
}

@mixin _generate-types-scale($config) {

	$mixin       : map-get($config, 'mixin');
	$property    : map-get($config, 'property');
	$base        : map-get($config, 'base');
	$ratio       : map-get($config, 'ratio');
	$length      : map-get($config, 'length');
	$preserve    : map-get($config, 'preserve');
	$utils       : map-get($config, 'utils');
	$src         : map-get($config, 'src');
	$prefix      : map-get($config, 'prefix');
	$suffix      : map-get($config, 'suffix');
	$break-at    : map-get($config, 'break-at');
	$breakpoints : map-get($config, 'breakpoints');

	$base-min    : null;
	$base-max    : null;
	$ratio-min   : null;
	$ratio-max   : null;
	$value       : null;
	$keys        : null;
	$suffix-prev : null;
	$_suffix     : $suffix;
	$src-length  : length($src);
	$src-type    : type-of($src);
	$length      : if($length != null, $length, $src-length);
	$is-fluid    : if($mixin == 'fluid-space-types' or $mixin == 'fluid-font-types', true, false);

	@if not $is-fluid and $base != null {
		--#{$prefix}ratio : #{$ratio};
		--#{$prefix}base  : #{$base};
	}

	@if $is-fluid and $base != null {
		$base-min  : map-get($base, 'min');
		$base-max  : map-get($base, 'max');
		$ratio-min : map-get($ratio, 'min');
		$ratio-max : map-get($ratio, 'max');
	}

	@if $src-type == map {
		$keys       : list-converted($src, 'keys');
		$src        : list-converted($src, 'values');
		$src-length : length($src);
	}

	@for $i from 1 through $length {
		$suffix                : get-suffix($_suffix, $length, $i);

		@if $is-fluid and $base != null {
			$min   : $base-min * math.pow($ratio-min, $i - 1);
			$max   : $base-max * math.pow($ratio-max, $i - 1);
			$value : #{clamped($min, $max, $width-xs, $width-xl)};
		}

		@if not $is-fluid and $base != null {
			$value : calc(var(--#{$prefix}base) * var(--#{$prefix}ratio));

			@if $i > 1 {
				$suffix-prev : get-suffix($_suffix, $length, $i - 1);
				$value       : calc(var(--#{$prefix}#{$suffix-prev}) * var(--#{$prefix}ratio));
			}

			@if $preserve > 1 {
				$value : get-preserved-value($base, $ratio, $preserve, $prefix, if($i > 1, $suffix-prev, $suffix), $i);
			}
		}

		@if $src-type == list or $src-type == map {
			$value : nth($src, $i);

			@if $src-type == map {
				$prefix : nth($keys, $i);
				$suffix : '';
			}
		}

		--#{$prefix}#{$suffix} : #{$value}; // The css custom property generated

		// The utility class generated
		@if $utils {
			@at-root .#{$prefix}#{$suffix} {
				#{$property} : var(--#{$prefix}#{$suffix});
			}
		}
	}

	@if ($breakpoints != null) {
		@for $i from 1 through length($breakpoints) {
			$breakpoint : nth(nth($breakpoints, $i), 1);
			$base       : map-get($breakpoints, $breakpoint, 'base');
			$ratio      : map-get($breakpoints, $breakpoint, 'ratio');
			$src        : map-get($breakpoints, $breakpoint, 'src');
			$src-type   : type-of($src);

			@if $src-type == map {
				$keys : list-converted($src, 'keys');
				$src  : list-converted($src, 'values');
			}

			@media (#{$break-at}-width: $breakpoint) {

				@if $base != null {
					--#{$prefix}base : #{$base};
				}

				@if $ratio != null {
					--#{$prefix}ratio : #{$ratio};
				}

				@if $src != null {
					$x : 1;
					$y : $src-length - length($src) + 1;

					@while $y <= $src-length {
						$suffix                : get-suffix($_suffix, $src-length, $y);
						$value                 : nth($src, $x);

						@if $src-type == map {
							$prefix : nth($keys, $x);
							$suffix : '';
						}

						--#{$prefix}#{$suffix} : #{$value}; // The css custom property generated

						$y                     : $y + 1;
						$x                     : $x + 1;
					}
				}
			}
		}
	}
}

