@charset "UTF-8";
@forward 'variables';
@forward 'maps' hide $breakpoints, $ratios, $suffixes;
@use 'sass:map' as *;
@use 'mixins' as *;
@use 'variables' as *;

@mixin utilities(
	$config: null,
	$auto: false,
	$src: null,
) {

	$mixin : 'utilities';

	@include compile-utilities-config($config, $mixin, $auto, $src);
}

@mixin colors(
	$config: null,
	$src: null,
	$tints: null,
	$shades: null,
	$format: $colors-format,
	$prefix: $colors-prefix,
	$suffix: $colors-suffix,
	$utils: $colors-utils,
	$utils-property-color: $colors-utils-property-color,
	$utils-property-bg: $colors-utils-property-bg,
	$utils-prefix-color: $colors-utils-prefix-color,
	$utils-prefix-bg: $colors-utils-prefix-bg,
) {

	$mixin : 'colors';

	@include compile-colors-config($config, $mixin, $src, $tints, $shades, $format, $prefix, $suffix, $utils, $utils-property-color, $utils-property-bg, $utils-prefix-color, $utils-prefix-bg);
}

@mixin fluid-font-types(
	$config: null,
	$src: null,
	$base: null,
	$ratio: null,
	$length: null,
	$clamp: null,
	$prefix: $fluid-font-types-prefix,
	$suffix: $fluid-font-types-suffix,
	$utils: $fluid-font-types-utils,
	$utils-property: $fluid-font-types-utils-property) {

	$mixin    : 'fluid-font-types';
	$preserve : 0;
	@include compile-types-config($config, $mixin, $src, $base, $ratio, $length, $clamp, $preserve, $prefix, $suffix, $utils, $utils-property);
}

@mixin fluid-space-types(
	$config: null,
	$src: null,
	$base: null,
	$ratio: null,
	$length: null,
	$clamp: null,
	$prefix: $fluid-space-types-prefix,
	$suffix: $fluid-space-types-suffix,
	$utils: $fluid-space-types-utils,
	$utils-property: $fluid-space-types-utils-property) {

	$mixin    : 'fluid-space-types';
	$preserve : 0;
	@include compile-types-config($config, $mixin, $src, $base, $ratio, $length, $clamp, $preserve, $prefix, $suffix, $utils, $utils-property);
}

@mixin font-types(
	$config: null,
	$src: null,
	$base: null,
	$ratio: null,
	$length: null,
	$preserve: 0,
	$prefix: $font-types-prefix,
	$suffix: $font-types-suffix,
	$utils: $font-types-utils,
	$utils-property: $font-types-utils-property) {

	$mixin : 'font-types';
	$clamp : null;
	@include compile-types-config($config, $mixin, $src, $base, $ratio, $length, $clamp, $preserve, $prefix, $suffix, $utils, $utils-property);
}

@mixin space-types(
	$config: null,
	$src: null,
	$base: null,
	$ratio: null,
	$length: null,
	$preserve: 0,
	$prefix: $space-types-prefix,
	$suffix: $space-types-suffix,
	$utils: $space-types-utils,
	$utils-property: $space-types-utils-property) {

	$mixin : 'space-types';
	$clamp : null;
	@include compile-types-config($config, $mixin, $src, $base, $ratio, $length, $clamp, $preserve, $prefix, $suffix, $utils, $utils-property);
}

/*
/// Main generator mixin, which can call other mixins and output various types of css properties based on the config.
/// @author - Martin Kam√≠r
/// @access public
/// @example: $config: (
/// font-types' / 'space-types' : (
/// 	'base' {number} - Accepts a number with unit.
/// 	'ratio' {number/string} - Accepts a integer or string from $ratios map.
/// 	'length' {number} - The length of the generated css properties. Number must be with no unit.
/// 	'preserve' {number} - The number of how many css properties will be preserved. Means the values will ignore any future changes of $base and $ratio.
/// 	'utils' {boolean} - Enables or disables the generation of utility classes.
/// 	'prefix' {string} - The name of css property and utility classes.
/// 	'suffix' {string} - Defines the order of the css properties and utility classes. Suffix has many options from $suffixes map, or using numeric, numeric-hundreds. Also custom suffixes can be used as list.
/// 	'src' {list, map} - Source of custom values from list or map.
/// 	'break-at' {string} - Defines the min-width or max-width of the breakpoint by calling 'min' or 'max'.
/// 	'breakpoints' {map}  - Defines the breakpoints and values to be changed.
/// 	),
/// fluid-font-types' / 'fluid-space-types' : (
/// 	'base' {number/map} - Accepts a number with unit or map for fluid scaling with keys 'min' and 'max' with values of numbers with units.
/// 	'ratio' {number/string/map} - Accepts a integer or string from $ratios map or map for fluid scaling with keys 'min' and 'max' with values of integers or strings from $ratios map.
///     THE REST IS SAME as 'font-types' / 'space-types' configuration
/// 	),
/// colors' : (
/// 	'src' {map} - The source values of colors.
/// 	'tints' {list} - Defining the values for tints of colors as percentages.
/// 	'shades' {list} - Same as $tints but for shades.
/// 	'format' {string} - Defines the output color format.
/// 	'utils' {boolean} - Enables or disables the generation of utility classes.
/// 	'prefix' {string} - Defines the prefix for generated css variable.
/// 	'prefix-text' {string} - Defines the name of utility classes for the color property.
/// 	'prefix-bg' {string} - Defines the name of utility classes for the background property.
/// 	'suffix' {string} - Defines the order of the css properties and utility classes. Suffix has many options from $suffixes map, or using numeric, numeric-hundreds. Also custom suffixes can be used as list.
/// 	),
/// 'utilities' : (
/// 	'auto' {boolean} - Enables if all predefined maps should be generated.
/// 	'src' {map} - The source maps to generate.
/// 	),
/// The utilities generator also gives ability for source maps to be able generate utility classes with key 'utils' to true and key 'property' to be used.
 */
@mixin all($config) {
	@if map-has-key($config, 'font-types') {
		@include font-types($config);
	}

	@if map-has-key($config, 'space-types') {
		@include space-types($config);
	}

	@if map-has-key($config, 'fluid-font-types') {
		@include fluid-font-types($config);
	}

	@if map-has-key($config, 'fluid-space-types') {
		@include fluid-space-types($config);
	}

	@if map-has-key($config, 'colors') {
		@include colors($config);
	}

	@if map-has-key($config, 'utilities') {
		@include utilities($config);
	}
}