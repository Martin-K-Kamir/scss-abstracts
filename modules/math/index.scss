@charset "UTF-8";
@use 'sass:math';


$agent-default-font-size  : 16 !default;
$author-default-font-size : 10 !default;

// integer / math
/**
 * Returns unitless number.
 *
 * @author - Martin Kamír
 *
 * @example
 * _remove-unit(1rem) => 1;
 * _remove-unit(5em, '_em') => 5;
 * _remove-unit(15%, '%') => 15;
 * @overload _remove-unit($number, $unit)
 * @param $number {number} - Number to remove unit from.
 * @param $unit {string} - Unit to remove.
 * @return number with no unit.
 */
@function _remove-unit($number, $unit) {
	$removed-unit : _string-replace($number, $unit);
	$number : _convert-to-number($removed-unit);
	@return $number;
}

@function round($number, $places: 0) {
	$n : 1;
	@if $places > 0 {
		@for $i from 1 through $places {
			$n : $n * 10;
		}
	}
	@return math.div(round($number * $n), $n);
}

/**
 * Returns scaled number.
 *
 * @author - Martin Kamír
 *
 * @example
 * _number-scale(1rem, 50%) => 0.5rem;
 * _number-scale(1rem, 150) => 1.5rem;
 * @overload _number-scale($number, $scale: 100%)
 * @param $number {number} - The number that is being scaled.
 * @param $decrease {number} - Value that is being scaled by.
 * @return scaled number
 */
@function math-scale($number, $scale: 100%) {
	@if (type-of($scale) != number) {
		@error 'Invalid type value: parameter $scale must be a number.';
	}
	@if ($scale < 0) {
		@error 'Invalid value: parameter $scale must be a number greater than `0`.';
	}

	// refactor this to check if its css custom property
	@if (type-of($number) == string) {
		@return $number;
	}
	@if (type-of($number) == calculation) {
		@return $number;
	}

	$scale : _remove-unit($scale, '%');
	@return math.div($number, 100) * $scale
}

// refactor

// convert to number // math
/**
 * Function returns number with a type of number.
 *
 */
@function _convert-to-number($value) {
	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		@error 'Value for `_convert-to-number` should be a number or a string.';
	}

	$result : 0;
	$digits : 0;
	$minus : str-slice($value, 1, 1) == '-';
	$numbers : ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character : str-slice($value, $i, $i);

		@if (index(map-keys($numbers), $character) or $character == '.') {
			@if $character == '.' {
				$digits : 1;
			} @else if $digits == 0 {
				$result : $result * 10 + map-get($numbers, $character);
			} @else {
				$digits : $digits * 10;
				$result : $result + math.div(map-get($numbers, $character), $digits);
			}
		}
	}

	@return if($minus, -$result, $result);
}

// refactor
/**
 * Returns a clamp function with minimum and maximum value based on the breakpoint values.
 *
 * @author - Aleksandr Hovhannisyan (https://www.aleksandrhovhannisyan.com/blog/fluid-type-scale-with-css-clamp/)
 *
 * I have modified the original function to work with multiple units and print out errors if function is called with invalid parameters.
 *
 * @example
 * clamped(1rem, 3rem, 20em, 65em) => clamp(1rem, 2.78vw + 0.11rem, 3rem);
 * clamped(1rem, 3rem) => clamp(1rem, 1.88vw + 0.3rem, 3rem);
 * @overload clamped($min-value, $max-value, $min-screen: map-get($map-for-breakpoints, "screen-xs"), $max-screen: map-get($map-for-breakpoints, "screen-xl"))
 * @param $min-value {number} - Minimum value.
 * @param $max-value {number} - Maximum value.
 * @param $min-screen {number} - Minimum breakpoint value.
 * @param $max-screen {number} - Maximum breakpoint value.
 * @return clamp function.
 */
@function clamped($min-value, $max-value, $min-width, $max-width) {
	$slope : math.div($max-value - $min-value, $max-width - $min-width);
	$slope-vw : round($slope * 100, 2);
	$intercept-rems : round(to-rems($min-value - $slope * $min-width), 2);
	$min-rems : round(to-rems($min-value), 2);
	$max-rems : round(to-rems($max-value), 2);
	@return clamp(#{$min-rems}, #{$slope-vw}vw + #{$intercept-rems}, #{$max-rems});
}

@function layer($name) {
	@if index($list-of-layers, $name) {
		@return (length($list-of-layers) - index($list-of-layers, $name))+1;
	} @else {
		@warn 'There is no item "#{$name}" in this list; choose one of: #{$list-of-layers}';
		@return null;
	}
}

