$list-1          : null;
$list-2          : null;
$list-3          : null;
$list-4          : null;
$map             : null;


$config-ultimate : (
		'fonts' : (
				'src' : $list-1,
				'break-at' : 'max',
				'breakpoints': (
						'pc-xs' : $list-2,
						'tablet-max' : $list-3,
						'phone-max' : $list-4,
				),
		),
		'spaces' : (
				'base' : 1rem,
				'ratio' : 'major-second',
				'length' : 10,
		),
		'colors' : (
				'hsl' : true,
				'src' : ('primary' : red, 'secondary' : blue, 'tertiary' : green, 'text' : gray, 'surface' : white, 'btn-primary' : 'secondary'),
				'suffix' : 'roman',
				'dark-mode' : (
						'lightness' : 50%,
						'src' : ('primary' : red, 'secondary' : blue, 'tertiary' : green, 'text' : gray, 'surface' : white, 'btn-primary' : 'secondary'),
						'src' : 'predefined',
				)
		),
		'properties' : (
				'src' : ($map-for-font-weights, $map-for-letter-spacings),
		),
		'classes' : (
				'predefined' : true,
		)
);


@mixin generate-colors($config: null,
$scale: (20%, 40%, 80%, 100%),
$src : ('primary' : red, 'secondary' : blue),
$src : $map-for-colors,
$socials : $map-for-colors-socials,
$socials : ('facebook', 'twitter', 'instagram', 'pinterest', 'youtube', 'linkedin'),
$state : $map-for-color-states,
$suffix : 'roman',
) {
	// do something
}


/*
					$map-for-font-weights,
					$map-for-aspect-ratios,
					$map-for-borders,
					$map-for-content-sizes,
					$map-for-letterspacings,
					$map-for-lineheights,
					$map-for-shadows,
					$map-for-easing,
					$map-for-animations,
 */

@mixin size($width: null, $height: null) {
	width  : $width;
	height : $height or $width;
}

@mixin max-size($width: null, $height: null) {
	max-width  : $width;
	max-height : $height or $width;
}

@mixin min-size($width: null, $height: null) {
	min-width  : $width;
	min-height : $height or $width;
}

@mixin flow($gap, $direction: 'block') {
	@if ($direction == 'block') {
		& > * + * {
			margin-top : $gap;
		}
	} @else if ($direction == 'inline') {
		& > * + * {
			margin-left : $gap;
		}
	}
}

// Generate stack classes if key is 'spaces' and utility-classes are set to true.
@if ($key == 'space-types' or $key == 'fluid-space-types') and $utility-classes == true {
	@at-root .stack {
		display : grid;
		gap     : var(--space, var(--#{$prefix}base));
	}
	@at-root .stack > * {
		margin : 0;
	}
}


:root {
	//@include generate-colors($src : $map-colors, $tints : (80%), $shades : (80%));
	@include generate-font-types($base : 3rem, $ratio : 'minor-second', $length : 3, $suffix : 'size-x');
	//@include generate-fluid-font-types($config);
	//@include generate-fluid-font-types($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-space-types($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-font-scales($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-font-scales($src : $list-of-fluid-fonts);
	//@include generate-space-scales($base : 1rem, $ratio : 'minor-second', $length : 10);
	//
	//
	//@include generate-properties(
	//				$map-for-font-weights,
	//				$map-for-aspect-ratios,
	//				$map-for-borders,
	//				$map-for-content-sizes,
	//				$map-for-letter-spacings,
	//				$map-for-line-heights,
	//				$map-for-shadows,
	//				$map-for-easing,
	//				$map-for-animations,
	//);

	//@include generate-classes(
	//				$map-for-font-weights,
	//				$map-for-letterspacings,
	//				$map-for-lineheights,
	//				$map-for-shadows,
	//);

	//@include generate-classes(predefined);
	//@include generate-classes(config);
	//@include generate-properties(config);
	//@include generate-classes($map-for-font-weights);
}

//@include generate-colors($src : $map-colors, $tints : (80%), $shades : (80%));


// COLORS MIXN
@each $key, $value in $src {
	@if $shades != null and $tints != null {
		@if $tints != null {
			@for $i from 1 through list.length($tints) {
				$_value : get-hsl(mix(white, $value, list.nth($tints, $i)), $hsl);
				$colors : list.append($colors, $_value);


				@if $suffix != 'color-adjectives' {
					$_suffix : '-#{_get-suffix($suffix, list.length($tints), $i)}';
				};


				@if $suffix == 'color-adjectives' {
					$_suffix : '-#{_get-suffix($suffix, list.length($tints), $i, 'lighter-values')}';
					@include _variable-shell($key, $_suffix, $_value);

					@if $utility-classes {
						@at-root .#{$prefix-text}#{$key}#{$_suffix} {
							@include _declaration-shell($key, $_suffix, $value, 'color');
						}

						@at-root .#{$prefix-background}#{$key}#{$_suffix} {
							@include _declaration-shell($key, $_suffix, $value, 'background-color');
						}
					}
				}

			};

		}

		@if $suffix == 'color-adjectives' {
			$_suffix : '';
			$_value  : get-hsl($value, $hsl);


			@include _variable-shell($key, $_suffix, $_value);

			@if $utility-classes {
				@at-root .#{$prefix-text}#{$key}#{$_suffix} {
					@include _declaration-shell($key, $_suffix, $_value, 'color');
				}

				@at-root .#{$prefix-background}#{$key}#{$_suffix} {
					@include _declaration-shell($key, $_suffix, $_value, 'background-color');
				}
			}
		}

		@if $suffix != 'color-adjectives' {
			$_value : get-hsl($value, $hsl);

			$colors : list.append($colors, $_value);
		}


		@if $shades != null {
			@for $i from 1 through list.length($shades) {
				$_value : get-hsl(mix(black, $value, list.nth($shades, $i)), $hsl);
				$colors : list.append($colors, $_value);

				@if $suffix != 'color-adjectives' {
					$_suffix : '-#{_get-suffix($suffix, list.length($tints), $i)}';
				};

				@if $suffix == 'color-adjectives' {
					$_suffix : '-#{_get-suffix($suffix, list.length($shades), $i, 'darker-values')}';
					@include _variable-shell($key, $_suffix, $_value);

					@if $utility-classes {
						@at-root .#{$prefix-text}#{$key}#{$_suffix} {
							@include _declaration-shell($key, $_suffix, $value, 'color');
						}

						@at-root .#{$prefix-background}#{$key}#{$_suffix} {
							@include _declaration-shell($key, $_suffix, $value, 'background-color');
						}
					}


				}

			};
		};

		@if $suffix != 'color-adjectives' {
			@for $i from 1 through list.length($colors) {
				$_suffix : '-#{_get-suffix($suffix, list.length($colors), $i)}';
				$_value  : list.nth($colors, $i);
				@include _variable-shell($key, $_suffix, $_value);

				@if $utility-classes {
					@at-root .#{$prefix-text}#{$key}#{$_suffix} {
						@include _declaration-shell($key, $_suffix, $value, 'color');
					}

					@at-root .#{$prefix-background}#{$key}#{$_suffix} {
						@include _declaration-shell($key, $_suffix, $value, 'background-color');
					}
				}
			}
		};


	};


	@if $shades == null or $tints == null {
		$suffix : '';

		@include _variable-shell($key, $suffix, $value);

		@if $utility-classes {
			@at-root .#{$prefix-text}#{$key} {
				@include _declaration-shell($key, $suffix, $value, 'color');
			}

			@at-root .#{$prefix-background}#{$key} {
				@include _declaration-shell($key, $suffix, $value, 'background-color');
			}
		}

	};


	$colors : ();
}


@if $src-dark != null and ($shades == null or $tints == null) {
	@media (prefers-color-scheme : dark) {
		@each $key, $value in $src-dark {

			@include _variable-shell($key, $suffix, $value);
		}
	}
}