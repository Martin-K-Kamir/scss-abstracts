$list-1          : null;
$list-2          : null;
$list-3          : null;
$list-4          : null;
$map             : null;

$config-ultimate : (
		'fonts' : (
				'src' : $list-1,
				'break-at' : 'max',
				'breakpoints': (
						'pc-xs' : $list-2,
						'tablet-max' : $list-3,
						'phone-max' : $list-4,
				),
		),
		'spaces' : (
				'base' : 1rem,
				'ratio' : 'major-second',
				'length' : 10,
		),
		'colors' : (
				'lightness' : 100%,
				'hsl' : true,
				'scale' : (20%, 40%, 80%, 100%),
				'src' : ('primary' : red, 'secondary' : blue, 'tertiary' : green, 'text' : gray, 'surface' : white, 'btn-primary' : 'secondary'),
				'src' : $map,
				'src' : 'predefined',
				'socials' : ('facebook', 'twitter', 'instagram', 'pinterest', 'youtube', 'linkedin'),
				'socials' : $map,
				'state' : ('error' : red, 'success' : green, 'warning' : yellow, 'info' : blue),
				'state' : $map,
				'suffix' : 'roman',
				'dark-mode' : (
						'lightness' : 50%,
						'src' : ('primary' : red, 'secondary' : blue, 'tertiary' : green, 'text' : gray, 'surface' : white, 'btn-primary' : 'secondary'),
						'src' : 'predefined',
				)
		),
		'properties' : (
				'src' : ($map-for-font-weights, $map-for-letter-spacings),
		),
		'classes' : (
				'predefined' : true,
		)
);


@mixin generate-colors($config: null,
$scale: (20%, 40%, 80%, 100%),
$src : ('primary' : red, 'secondary' : blue),
$src : $map-for-colors,
$socials : $map-for-colors-socials,
$socials : ('facebook', 'twitter', 'instagram', 'pinterest', 'youtube', 'linkedin'),
$state : $map-for-color-states,
$suffix : 'roman',
) {
	// do something
}


/*
					$map-for-font-weights,
					$map-for-aspect-ratios,
					$map-for-borders,
					$map-for-content-sizes,
					$map-for-letterspacings,
					$map-for-lineheights,
					$map-for-shadows,
					$map-for-easing,
					$map-for-animations,
 */

@mixin size($width: null, $height: null) {
	width  : $width;
	height : $height or $width;
}

@mixin max-size($width: null, $height: null) {
	max-width  : $width;
	max-height : $height or $width;
}

@mixin min-size($width: null, $height: null) {
	min-width  : $width;
	min-height : $height or $width;
}

@mixin flow($gap, $direction: 'block') {
	@if ($direction == 'block') {
		& > * + * {
			margin-top : $gap;
		}
	} @else if ($direction == 'inline') {
		& > * + * {
			margin-left : $gap;
		}
	}
}

// Generate stack classes if key is 'spaces' and utility-classes are set to true.
@if ($key == 'space-types' or $key == 'fluid-space-types') and $utility-classes == true {
	@at-root .stack {
		display : grid;
		gap     : var(--space, var(--#{$prefix}base));
	}
	@at-root .stack > * {
		margin : 0;
	}
}