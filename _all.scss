@charset "UTF-8";
@use "sass:string";
@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "sass:list";

@import './lists/list-of-directions';
@import './lists/list-of-layers';

@import './properties/aspect-ratios';
@import './properties/borders';
@import './properties/breakpoints';
@import './properties/color-palette';
@import './properties/easing';
@import './properties/animations';
@import './properties/shadows';
@import './properties/sizes';
@import './properties/typography';
@import './properties/tokens';

@import './maps/map-for-borders';
@import './maps/map-for-breakpoints';
@import './maps/map-for-flexbox';
@import './maps/map-for-font-weights';
@import './maps/map-for-font-sizes';
@import './maps/map-for-colors';
@import './maps/map-for-directions';
@import './maps/map-for-laptops';
@import './maps/map-for-letterspacing';
@import './maps/map-for-lineheights';
@import './maps/map-for-pc';
@import './maps/map-for-shadows';
@import './maps/map-for-sizes';
@import './maps/map-for-phones';
@import './maps/map-for-tablets';

@import './utilities/clear-unit';
@import './utilities/clear-whitespace';
@import './utilities/convert-to-em';
@import './utilities/convert-to-number';
@import './utilities/darken';
@import './utilities/font-sizer';
@import './utilities/font-source';
@import './utilities/is-color';
@import './utilities/is-number';
@import './utilities/is-time';
@import './utilities/lighten';
@import './utilities/map-deep-get';
@import './utilities/null';
@import './utilities/pixelify';
@import './utilities/pseudo-selector';
@import './utilities/remify';
@import './utilities/shorthand-property';
@import './utilities/string-to-number';
@import './utilities/validate-breakpoint';
@import './utilities/validate-length';
@import './utilities/validate-scissors';

@import 'functions/color-mixer';
@import 'functions/layer';
@import 'functions/em';

@import './library/absolute';
@import './library/animation';
@import './library/breakpoint-landscape';
@import './library/breakpoint';
@import './library/except';
@import './library/fixed';
@import './library/flex';
@import './library/hide';
@import './library/laptop';
@import './library/loadify';
@import './library/flow';
@import './library/only';
@import './library/pc';
@import './library/phone';
@import './library/remove';
@import './library/screen-agent';
@import './library/size';
@import './library/tablet';
@import './library/text-shadow';
@import './library/text-stroke';

@import 'decide-scale-calc';
@import 'map-for-scalable-hierarchy';

$map-for-scales  : (
		'minor-second' : 1.067,
		'major-second': 1.125,
		'minor-third' : 1.200,
		'major-third' : 1.250,
		'perfect-fourth' : 1.333,
		'augmented fourth' : 1.414,
		'perfect-fifth' : 1.500,
		'golden-ratio' : 1.618
);

$map-for-font-s  : (
		'f-size-1a' : 2.1,
		'f-size-2a' : 2.2,
		'f-size-3a' : 2.3,
		'f-size-4a' : 2.4,
		'f-size-5a' : 2.5,
		'f-size-55a' : 2.5,
		'f-size-541a' : 2.5,
		'f-size-5541a' : 2.5,
		'f-size-6a' : 2.6,
		'f-size-7a' : 2.7rem,
		'f-size-8a' : 2.8,
		'f-size-9a' : 2.9rem,
		'f-size-10a' : 3rem,
);

$list-for-font-s : (1, 2, 3, 4.5);

@function __convert-to-number($value) {
	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		$_ : log('Value for `to-number` should be a number or a string.');
	}

	$result : 0;
	$digits : 0;
	$minus : str-slice($value, 1, 1) == '-';
	$numbers : ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character : str-slice($value, $i, $i);

		@if not (index(map-keys($numbers), $character) or $character == '.') {
			@return to-length(if($minus, -$result, $result), str-slice($value, $i))
		}

		@if $character == '.' {
			$digits : 1;
		} @else if $digits == 0 {
			$result : $result * 10 + map-get($numbers, $character);
		} @else {
			$digits : $digits * 10;
			$result : $result + math.div(map-get($numbers, $character), $digits);
		}
	}

	@return if($minus, -$result, $result);
}


@function __string-replace($string, $search, $replace: '') {
	$index : str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + __string-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}

@function __number-slice($number, $start-at, $end-at, $unit: 'rem') {
	$number : string.slice(__string-replace(#{$number}, $unit), $start-at, $end-at) + $unit;
	@return $number;
}

@function __decide-preserve($base, $scale, $preserve, $i) {
	@if ($preserve >= $i) {
		@return __number-slice(__decide-scale-calc($base, $scale, $preserve, $i), 0, 7);
	} @else if ($preserve + 1 == $i) {
		@return __decide-scale-calc($base, $scale, $preserve, $i);
	} @else {
		@return calc(var(--f-size-#{$i - 1}) * var(--scale));
	}
}

@function __convert-to-rem($number) {
	@if (math.unit(__convert-to-number($number)) == '%') {
		@return __string-replace($number, '%', 'rem');
	} @else if (math.is-unitless(__convert-to-number($number))) {
		@return $number + 'rem';
	}

	@return $number;
}

@function __decrease-number($number, $decrease) {
	@if (math.unit($number) != 'rem' and math.is-unitless($number) != true) {
		@error 'Number must be only in rem or unitless. Change your #{$number} to #{__string-replace(#{$number}, #{math.unit($number)}, 'rem')} or #{__string-replace(#{$number}, #{math.unit($number)}, '')} without any unit.';
	}

	@if ($decrease == 0) {
		$number : __convert-to-number(__string-replace(#{$number}, 'rem', ''));

		@return $number + 'rem';
	} @else {
		$number : __convert-to-number(__string-replace(#{$number}, 'rem', ''));
		$value1 : $number - (math.div($number, 100) * $decrease);

		$value2 : __convert-to-number(__string-replace(#{$value1}, '%', ''));

		@return $value2 + 'rem';
	}
}

@function slice($list, $start: 1, $end: length($list)) {
	$result : null;

	@if type-of($start) != number or type-of($end) != number {
		@warn "Either $start or $end are not a number for `slice`.";
	} @else if $start > $end {
		@warn "The start index has to be lesser than or equals to the end index for `slice`.";
	} @else if $start < 1 or $end < 1 {
		@warn "List indexes must be non-zero integers for `slice`.";
	} @else if $start > length($list) {
		@warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
	} @else if $end > length($list) {
		@warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
	} @else {
		$result : ();

		@for $i from $start through $end {
			$result : append($result, nth($list, $i));
		}
	}

	@return $result;
}

@function reverse($list, $recursive: false) {
	$result : ();

	@for $i from length($list) * -1 through -1 {
		@if type-of(nth($list, abs($i))) == list and $recursive {
			$result : append($result, reverse(nth($list, abs($i)), $recursive));
		} @else {
			$result : append($result, nth($list, abs($i)));
		}
	}

	@return $result;
}


@function __make-list($list, $i, $make-list-from-min, $make-list-from-max) {
	$create-small-list : list.set-nth(reverse(slice($make-list-from-min, 1, math.ceil(math.div(list.length($list), 2)))), 1, 'min');
	$create-big-list : list.set-nth(slice($make-list-from-max, 1, math.floor(math.div(list.length($list), 2))), -1, 'max');
	$created-list : list.join($create-small-list, $create-big-list);
	@return list.nth($created-list, $i);
}

@function __level($level, $i, $custom, $atomic) {
	@if ($level == 'numeric') {
		@return $i;
	} @else if ($level == 'thousand') {
		@return $i + '00';
	} @else if ($level == 'minmax') {
		$list-of-higher-values : map.get($map-for-scalable-hierarchy, $level, higher-values);
		$list-of-lower-values : map.get($map-for-scalable-hierarchy, $level, lower-values);

		@if (list.length($custom) > list.length(list.join($list-of-higher-values, $list-of-lower-values))) {
			@error 'do latera'
		}

		$create-small-list : list.set-nth(reverse(slice($list-of-lower-values, 1, math.ceil(math.div(list.length($custom), 2)))), 1, 'min');
		$create-big-list : list.set-nth(slice($list-of-higher-values, 1, math.floor(math.div(list.length($custom), 2))), -1, 'max');
		$created-list : list.join($create-small-list, $create-big-list);

		@return list.nth($created-list, $i);
	} @else if ($level == 'atomic') {
		$num : __string-replace(__string-replace($atomic, 'rem', ''), '.', '-');
		@return $num;
	} @else if ($level == 'size' or 'size-gradation' or 'size-and-number' or 'size-and-x') {
		$list-of-higher-values : map.get($map-for-scalable-hierarchy, $level, higher-values);
		$list-of-lower-values : map.get($map-for-scalable-hierarchy, $level, lower-values);

		@if (list.length($custom) < list.length(list.join($list-of-higher-values, $list-of-lower-values)) or $level == 'size') {
			$create-small-list : reverse(slice($list-of-lower-values, 1, math.ceil(math.div(list.length($custom), 2))));
			$create-big-list : slice($list-of-higher-values, 1, math.floor(math.div(list.length($custom), 2)));
			$created-list : list.join($create-small-list, $create-big-list);

			@if (list.length($custom) > list.length($created-list) and $level == 'size') {
				@error '1'
			}

			@return list.nth($created-list, $i);
		}

		$list-of-higher-values : map.get($map-for-scalable-hierarchy, size-gradation, higher-values);
		$list-of-lower-values : map.get($map-for-scalable-hierarchy, size-gradation, lower-values);

		@if (list.length($custom) < list.length(list.join($list-of-higher-values, $list-of-lower-values)) or $level == 'size-gradation') {
			$create-small-list : reverse(slice($list-of-lower-values, 1, math.ceil(math.div(list.length($custom), 2))));
			$create-big-list : slice($list-of-higher-values, 1, math.floor(math.div(list.length($custom), 2)));
			$created-list : list.join($create-small-list, $create-big-list);

			@if (list.length($custom) > list.length($created-list) and $level == 'size-gradation') {
				@error '2'
			}

			@return list.nth($created-list, $i);
		}

		$list-of-higher-values : map.get($map-for-scalable-hierarchy, size-and-number, higher-values);
		$list-of-lower-values : map.get($map-for-scalable-hierarchy, size-and-number, lower-values);

		@if (list.length($custom) < list.length(list.join($list-of-higher-values, $list-of-lower-values)) or $level == 'size-and-number') {
			$create-small-list : reverse(slice($list-of-lower-values, 1, math.ceil(math.div(list.length($custom), 2))));
			$create-big-list : slice($list-of-higher-values, 1, math.floor(math.div(list.length($custom), 2)));
			$created-list : list.join($create-small-list, $create-big-list);

			@if (list.length($custom) > list.length($created-list) and $level == 'size-and-number') {
				@error '3'
			}

			@return list.nth($created-list, $i);
		}

		$list-of-higher-values : map.get($map-for-scalable-hierarchy, size-and-x, higher-values);
		$list-of-lower-values : map.get($map-for-scalable-hierarchy, size-and-x, lower-values);

		@if ($level == 'size-and-x') {
			$create-small-list : reverse(slice($list-of-lower-values, 1, math.ceil(math.div(list.length($custom), 2))));
			$create-big-list : slice($list-of-higher-values, 1, math.floor(math.div(list.length($custom), 2)));
			$created-list : list.join($create-small-list, $create-big-list);

			@if (list.length($custom) > list.length($created-list)) {
				@error '4'
			}

			@return list.nth($created-list, $i);
		}

	} @else if ($level == 'roman' or 'greek' or 'military' or 'planets' or 'nato' or 'primary') {
		$list : map.get($map-for-scalable-hierarchy, $level);

		@if (list.length($custom) > list.length($list)) {
			@error 'do later aa'
		}

		@return list.nth($list, $i);
	}
}

@mixin generate-type-scale($base: null, $scale: null, $types: null, $preserve: 0, $utility-classes: false, $custom: null, $decrease: 0, $custom-name: 'f-size-', $custom-level: 'numeric') {
	@if (meta.type-of($custom) == 'list') {
		@for $i from 1 through list.length($custom) {
			--#{$custom-name}#{__level($custom-level, $i, $custom, $atomic: __decrease-number(list.nth($custom, $i), $decrease))} : #{__decrease-number(list.nth($custom, $i), $decrease)};

			@if (utility-classes) {
				@at-root .#{$custom-name}#{$i} {
					font-size : var(--#{$custom-name}#{$i});
				}
			}
		}
	} @else if (meta.type-of($custom) == 'map') {
		@each $key, $value in $custom {
			--#{$key} : #{__decrease-number(($value), $decrease)};


			@if (utility-classes) {
				@at-root .#{$key} {
					font-size : var(--#{$key});
				}
			}
		}
	} @else {
		$TYPES_MAX_LIMIT : 40;
		$TYPES_MIN_LIMIT : 3;
		--f-size-base    : #{$base};

		@if ($types > $TYPES_MAX_LIMIT) {
			@error "The maximum number of types is 40. Use smaller number than #{$types}.";
		}

		@if ($types < $TYPES_MIN_LIMIT) {
			@error "The minimum number of types is 3. Use larger number than #{$types}.";
		}

		@if ($preserve > $types) {
			@error "The preserve number is larger than the number of types. Use smaller number than #{$types}.";
		}

		@if (meta.type-of($scale) == string) {
			$scale  : map.get($map-for-scales, $scale);
			--scale : #{$scale};
		} @else {
			--scale : #{$scale};
		}

		@if ($preserve == 0) {
			--f-size-start : calc(var(--f-size-base) / var(--scale));
			--f-size-0     : calc(var(--f-size-start) * var(--scale));

			@for $i from 1 through $types {
				--f-size-#{$i} : calc(var(--f-size-#{$i - 1}) * var(--scale));
			}
		} @else {
			$base          : math.div($base, $scale);
			--f-size-0     : #{$base};

			@for $i from 1 through $types {
				--f-size-#{$i} : #{__decide-preserve($base, $scale, $preserve, $i)};
			}
		}

		@if ($utility-classes) {
			@for $i from 1 through $types {
				@at-root .f-size-#{$i} {
					font-size : var(--f-size-#{$i});
				}
			}
		}
	}
}

:root {
	@include generate-type-scale($custom : $list-for-font-s, $utility-classes : true, $custom-name : text-, $custom-level : atomic);

}


/*
{
  "name": "petcenter",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "watch": "sass --watch --poll ./sass:./www/assets-petqr/css",
    "production": "gulp production"
  },
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "autoprefixer": "^10.4.7",
    "cssnano": "^5.1.11",
    "gulp": "^4.0.2",
    "gulp-postcss": "^9.0.1",
    "gulp-sass": "^5.1.0",
    "postcss": "^8.4.14",
    "postcss-cli": "^9.1.0",
    "postcss-preset-env": "^7.7.1",
    "sass": "^1.52.3"
  },
  "dependencies": {
    "gulp-sourcemaps": "^3.0.0"
  },
  "browserslist": [
    "> 0%",
    "last 2 versions"
  ]
}


 */