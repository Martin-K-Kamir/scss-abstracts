@charset "UTF-8";
@use "sass:string";
@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:color";

@import 'functions/layer';
@import 'functions/clamped';
@import 'functions/em';

@import 'lists/list-of-directions';
@import 'lists/list-of-layers';
@import 'lists/list-of-font-sizes';
@import 'lists/list-of-fluid-fonts';
@import 'lists/list-of-space-sizes';
@import 'lists/list-of-fluid-spaces';

@import 'maps/map-for-animations';
@import 'maps/map-for-aspect-ratios';
@import 'maps/map-for-breakpoints';
@import 'maps/map-for-colors';
@import 'maps/map-for-borders';
@import 'maps/map-for-flexbox';
@import 'maps/map-for-fluid-sizes';
@import 'maps/map-for-font-weights';
@import 'maps/map-for-content-sizes';
@import 'maps/map-for-directions';
@import 'maps/map-for-easing';
@import 'maps/map-for-letter-spacings';
@import 'maps/map-for-line-heights';
@import 'maps/map-for-shadows';
@import 'maps/map-for-radius';
@import 'maps/map-for-ratios';
@import 'maps/map-for-shadows';
@import 'maps/map-for-suffixes';

@import 'utilities/class-shell';
@import 'utilities/clear-unit';
@import 'utilities/clear-whitespace';
@import 'utilities/convert-to-number';
@import 'utilities/create-suffix-list';
@import 'utilities/declaration-shell';
@import 'utilities/decide-calc-method';
@import 'utilities/get-value';
@import 'utilities/get-name';
@import 'utilities/get-suffix';
@import 'utilities/is-color';
@import 'utilities/is-number';
@import 'utilities/is-time';
@import 'utilities/list-slice';
@import 'utilities/list-reverse';
@import 'utilities/map-deep-get';
@import 'utilities/map-deep-set';
@import 'utilities/map-keys';
@import 'utilities/null';
@import 'utilities/remove-unit';
@import 'utilities/number-slice';
@import 'utilities/number-round';
@import 'utilities/number-scale';
@import 'utilities/string-replace';
@import 'utilities/to-list';
@import 'utilities/validate-breakpoint';
@import 'utilities/validate-config-map';
@import 'utilities/validate-config-keys';
@import 'utilities/validate-config';
@import 'utilities/validate-length';
@import 'utilities/validate-ratio';
@import 'utilities/variable-shell';
@import 'utilities/generate-types-scale';
@import 'utilities/process-config';

@import 'library/absolute';
@import 'library/breakpoint-landscape';
@import 'library/breakpoint';
@import 'library/except';
@import 'library/fixed';
@import 'library/flex';
@import 'library/hide';
@import 'library/animation';
@import 'library/loadify';
@import 'library/only';
@import 'library/remove';
@import 'library/screen-agent';
@import 'library/text-shadow';
@import 'library/text-stroke';
@import 'library/generate-fluid-font-types';
@import 'library/generate-fluid-space-types';
@import 'library/generate-font-types';
@import 'library/generate-space-types';
@import 'library/generate-classes';
@import 'library/generate-properties';
@import 'library/generator';

$config          : (
		'fluid-font-types' : (
			//'base' : clamp(1.6rem, 1.89vw + 0.58rem, 3rem),
				'base' : clamped(1.6rem, 3rem),
				'ratio' : 'minor-second',
				'length' : 10,
				'suffix' : 'nato',
				'breakpoints' : (
						'tablet-min' : ('base' : clamped(1rem, 2rem)),
				)
		),
		'properties' : (
			//'predefined' : true,
				'src' : ($map-for-font-weights, $map-for-letter-spacings),
		),
		'classes' : (
				'predefined' : true,
			//'src' : ($map-for-font-weights, $map-for-letter-spacings),
		)
);

@function get-hsl($value, $hsl: true) {
	$hue : math.round(color.hue($value));
	$saturation : math.round(color.saturation($value));
	$lightness : math.round(color.lightness($value));

	@if $hsl {
		@return hsl($hue, $saturation, $lightness);
	} @else {
		@return '#{$hue, $saturation, $lightness}';
	}
}

@function get-color($white-or-black, $value, $tint-or-shade, $y, $hsl) {
	@return get-hsl(mix($white-or-black, $value, list.nth($tint-or-shade, $y)), $hsl);
}

@mixin generate-colors($config: null, $src: null, $src-dark: null, $shades: null, $tints: null, $hsl: true, $utility-classes: true, $prefix-text: 'text-', $prefix-background: 'surface-', $suffix: 'numeric') {
	$generate-dark-scheme : false;
	$map                  : $src;
	$length               : length($map);
	$keys                 : map-keys($map);
	$values               : map-values($map);

	$list                 : ();

	@for $i from 1 through if($src-dark == null, 1, 2) {
		@if $src-dark != null and $i == $length {
			$map                  : $src-dark;
			$generate-dark-scheme : true;
		}

		@if $generate-dark-scheme == false {
			@for $x from 1 through $length {
				$value : list.nth($values, $x);
				$key   : list.nth($keys, $x);

				@for $y from 1 through length($tints) {
					//$_value : get-hsl(mix(white, $value, list.nth($tints, $y)), $hsl);
					$_value : get-color(white, $value, $tints, $y, $hsl);
					$list   : list.append($list, $_value);
					@debug $list;
				}

				@include _variable-shell($key, '', $value);

			}
		} @else {
			@media (prefers-color-scheme : dark) {
				@each $key, $value in $map {
					@include _variable-shell($key, '', $value);
				}
			}
		}
	}
}

.foooo {
	color : hsl(351, 62%, 88%);
	color : hsl(350, 61%, 63%);
	color : hsl(207, 51%, 90%);
	color : hsl(207, 52%, 69%);
}

$map-colors      : ('primary': hsl(350, 100%, 38%), 'secondary': hsl(207, 56%, 48%));
$map-colors-dark : ('primary': hsl(350, 100%, 26%), 'secondary': hsl(207, 100%, 17%));
$map-for-dark    : (
		'primary-1' : hsl(350, 100%, 21%),
		'primary-2' : hsl(350, 100%, 28%),
		'primary-3' : hsl(350, 100%, 22%),
		'secondary-1' : hsl(206, 100%, 19%),
		'secondary-2' : hsl(205, 100%, 15%),
		'secondary-3' : hsl(218, 100%, 9%),
		'neutral-1' : hsl(0, 0%, 27%),
		'neutral-2' : hsl(0, 0%, 15%),
		'neutral-3' : hsl(0, 0%, 5%),
);

:root {
	//@include generate-colors($src : $map-for-colors, $src-dark : $map-for-dark);
	@include generate-colors($src : $map-colors, $src-dark : $map-colors-dark, $tints : (80%, 40%), $shades : (80%));
	//@include generate-colors($src : $map-colors, $tints : (40%), $shades : (80%), $suffix : 'color-adjectives');
	//@include generate-font-types($base : 3rem, $ratio : 'minor-second', $length : 5, $suffix : 'size-x-minmax');
	@include generate-font-types($base : 3rem, $ratio : 'minor-second', $length : 5);
	//@include generate-fluid-font-types($config);
	//@include generate-fluid-font-types($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-space-types($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-font-scales($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-font-scales($src : $list-of-fluid-fonts);
	//@include generate-space-scales($base : 1rem, $ratio : 'minor-second', $length : 10);
	//
	//
	//@include generate-properties(
	//				$map-for-font-weights,
	//				$map-for-aspect-ratios,
	//				$map-for-borders,
	//				$map-for-content-sizes,
	//				$map-for-letter-spacings,
	//				$map-for-line-heights,
	//				$map-for-shadows,
	//				$map-for-easing,
	//				$map-for-animations,
	//);

	//@include generate-classes(
	//				$map-for-font-weights,
	//				$map-for-letterspacings,
	//				$map-for-lineheights,
	//				$map-for-shadows,
	//);

	//@include generate-classes(predefined);
	//@include generate-classes(config);
	//@include generate-properties(config);
	//@include generate-classes($map-for-font-weights);
}

