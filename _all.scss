@charset "UTF-8";
@use "sass:string";
@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "sass:list";

@import './lists/list-of-directions';
@import './lists/list-of-layers';

@import './properties/aspect-ratios';
@import './properties/borders';
@import './properties/breakpoints';
@import './properties/color-palette';
@import './properties/easing';
@import './properties/animations';
@import './properties/shadows';
@import './properties/sizes';
@import './properties/typography';
@import './properties/tokens';

@import './maps/map-for-borders';
@import './maps/map-for-breakpoints';
@import './maps/map-for-flexbox';
@import './maps/map-for-font-weights';
@import './maps/map-for-font-sizes';
@import './maps/map-for-colors';
@import './maps/map-for-directions';
@import './maps/map-for-laptops';
@import './maps/map-for-letterspacing';
@import './maps/map-for-lineheights';
@import './maps/map-for-pc';
@import './maps/map-for-shadows';
@import './maps/map-for-sizes';
@import './maps/map-for-phones';
@import './maps/map-for-tablets';

@import './utilities/clear-unit';
@import './utilities/clear-whitespace';
@import './utilities/convert-to-em';
@import './utilities/convert-to-number';
@import './utilities/darken';
@import './utilities/font-source';
@import './utilities/is-color';
@import './utilities/is-number';
@import './utilities/is-time';
@import './utilities/lighten';
@import './utilities/map-deep-get';
@import './utilities/null';
@import './utilities/pixelify';
@import './utilities/pseudo-selector';
@import './utilities/remify';
@import './utilities/shorthand-property';
@import './utilities/string-to-number';
@import './utilities/validate-breakpoint';
@import './utilities/validate-length';
@import './utilities/validate-scissors';

@import 'functions/color-mixer';
@import 'functions/layer';
@import 'functions/em';

@import './library/absolute';
@import './library/animation';
@import './library/breakpoint-landscape';
@import './library/breakpoint';
@import './library/except';
@import './library/fixed';
@import './library/flex';
@import './library/hide';
@import './library/laptop';
@import './library/loadify';
@import './library/flow';
@import './library/only';
@import './library/pc';
@import './library/phone';
@import './library/remove';
@import './library/screen-agent';
@import './library/size';
@import './library/tablet';
@import './library/text-shadow';
@import './library/text-stroke';

// WIP
@import 'map-keys';
@import 'map-for-ratios';
@import 'scalable-system';
@import 'remove-unit';
@import './utilities/string-replace';
@import 'number-slice';
@import 'list-slice';
@import 'list-reverse';
@import 'map-for-suffixes';


$map-ff          : (
		'breakpoint-condition': 'max',
		'default' : (
				'f-size-1' : #{var(--f-size-asd)},
				'f-size-2' : 1.5rem,
				'f-size-3' : 2rem,
				'f-size-4' : 2.5rem,
				'f-size-5' : 3rem,
				'f-size-6' : 3.5rem,
				'f-size-7' : 4rem,
				'f-size-8' : 5rem,
				'f-size-9' : 6rem,
				'f-size-10' : 8rem,
		),
		'tablet-md' : (
				'f-size-7' : #{var(--f-size-asd)},
				'f-size-8' : 3rem,
				'f-size-9' : 4rem,
				'f-size-10' : 5rem,
		),
		'tablet-min' : (
				'f-size-9' : 3rem,
				'f-size-10' : 2rem,
		),
);

$map-f           : (
		'f-size-1' : #{var(--f-size-asd)},
		'f-size-2' : 1.5,
		'f-size-3' : 2,
		'f-size-4' : 2.5rem,
		'f-size-5' : 3,
		'f-size-6' : 3.5rem,
		'f-size-7' : 4rem,
		'f-size-8' : 5rem,
		'f-size-9' : 6rem,
		'f-size-10' : 7rem,
);

$map-fmin        : (
		'f-size-7' : #{var(--f-size-asd)},
		'f-size-8' : 3,
		'f-size-9' : 4,
		'f-size-10' : 6rem,
);

$map-fmin2       : (
		'f-size-9' : #{var(--f-size-asd)},
		'f-size-10' : 5rem,
);

//$config          : (
//		'modular-scaling' : (
//				'base' : 1rem,
//				'ratio' : 'major-second',
//				'length' : 10,
//				'preserve' : 5,
//		),
//);

//$config          : (
//		'custom-scaling' : (
//				'custom-values' : $map-f,
//				'breakpoint-condition' : 'max',
//				'breakpoints': (
//						'tablet-md' : $map-fmin,
//						'tablet-min' : $map-fmin2,
//				),
//		),
//);


$list-f          : (1rem, 1.5rem, 1.8rem, 2rem, 2.5rem, 3rem, 3.5rem, 4rem, 5rem, 6rem);
$list-fa         : (2rem, 2.5rem, 2.8rem, 3rem, 3.5rem, 4rem, 4.5rem, 5rem, 6rem, 7rem);
$list-fmin       : (2.8rem, 3.2rem, 3.5rem, 4rem, 5rem);
$list-fminer     : (3.8rem, 4.8rem);
$list-fminest    : (4.5rem);
//$config          : (
//		'custom-scaling': (
//				'custom-values' : $list-f,
//				'scale' : 100%,
//				'breakpoint-condition' : 'max',
//				'breakpoints': (
//						'pc-xs' : $list-fmin,
//						'tablet-max' : $list-fminer,
//						'phone-max' : $list-fminest,
//				),
//		),
//		'naming-convention' : (
//				'suffix-variable' : 'size-and-number',
//		)
//);

//$config    : (
//		'custom-scaling': (
//				'custom-values' : $map-f,
//		),
//);


@function __get-value($base, $ratio, $preserve, $i, $variable-prefix: null, $variable-suffix: null) {
	@if ($preserve >= $i) {
		$get-number : __scalable-system($base, $ratio, $preserve, $i, $variable-prefix);
		$sliced-number : __number-slice($get-number);
		$number : $sliced-number;

		@return $number;
	} @else if ($preserve + 1 == $i) {
		$get-number : __scalable-system($base, $ratio, $preserve, $i, $variable-prefix);
		$number : $get-number;

		@return $number;
	} @else {

		@return calc(var(--#{$variable-prefix}#{$variable-suffix}) * var(--ratio));
	}
}

/** WIP
 * Returns scaled value of `$number`.
 *
 * @author - Martin Kamír
 *
 * @example
 * __scale-number(1rem, 50%) => 0.5rem;
 * __scale-number(1rem, 150) => 1.5rem;
 * @overload __scale-number($number, $scale: 100%)
 * @param $number {number} - The number that is being scaled. Accepts only numbers with rem unit or no unit.
 * @param $decrease {number} - Value that is being scaled by. Accepts only numbers with % unit or no unit.
 * @return scaled number
 */
@function __scale-number($number, $scale: 100%) {

	// Checks if `$scale` is not number
	@if (meta.type-of($scale) != number) {
		@error 'Value of `$scale` must be a number.';
	}

	// Checks if `$scale` have `%` as unit or is `unitless`
	@if (math.unit($scale) != '%') {
		@error 'Value of `$scale` must have `%` as unit.';
	}

	// Checks if value of `$scale` is less than `0`
	@if ($scale < 0) {
		@error 'Parameter `$scale` holds value `#{$scale}`. Value must be greater than `0`.';
	}

	@if (meta.type-of($number) == string) {
		@return $number;
	}

	$scale : __remove-unit($scale, '%'); // Remove unit `%` from `$scale`
	$number : math.div($number, 100) * $scale; // Calculates new value of `$number`

	@return $number; // Returns new value of `$number`.
}

/**
 * Returns `$list` of corresponding suffixes. Based on `$set-suffix`.
 *
 * NOTE: This is helper function for function `__get-suffix-list`.
 *
 * @author - Martin Kamír
 *
 * @example
 * __get-suffix-list('size-x-minmax', (1rem, 2rem, 3rem, 4rem, 5rem), $minmax: true) => (min, s, m, l, max);
 * __get-suffix-list('size-x', (1rem, 2rem, 3rem, 4rem, 5rem)) => (xs, s, m, l, xl);
 * __get-suffix-list('size-minmax', (1rem, 2rem, 3rem, 4rem, 5rem), $minmax: true) => (min, small, medium, large, max);
 * @overload __get-suffix-list($set-suffix, $set-list-of-values, $minmax: false)
 * @param $set-suffix {string} - Name of the set suffix that will be used in outputting the suffix. Which is originally called from main `@mixin` as `suffix` parameter.
 * @param $set-list-of-values {list} - List of values that are being used for generating. Which is originally called from main `@mixin` as `$custom-sizes` parameter.
 * @param $minmax {boolean} - As default set to false. If set to true, suffixes will be generated for `min` and `max` values.
 * @return list of suffixes
 */
@function __get-suffix-list($set-suffix, $length, $minmax: false) {
	// Get higher and lower suffixes list from map for suffixes
	$get-lower-list : map.get($map-for-suffixes, $set-suffix, lower-values);
	$get-higher-list : map.get($map-for-suffixes, $set-suffix, higher-values);


	// Get the minimum and maximum index by
	// 1. Getting the length of the list
	// 2. Dividing the length of list by half
	// 3. For the minimum index ceil the number up to the next integer. For the maximum index floor the number down to the next integer
	$min-index : math.ceil(math.div($length, 2));
	$max-index : math.floor(math.div($length, 2));

	// Slice the list to get the minimum and maximum values
	$lower-list : __list-slice($get-lower-list, $end : $min-index);
	$higher-list : __list-slice($get-higher-list, $end : $max-index);


	// If `$minmax` is true, add `min` and `max` values to the list
	@if ($minmax == true) {
		$lower-list : list.set-nth($lower-list, -1, 'min');
		$higher-list : list.set-nth($higher-list, -1, 'max');
	}

	// Concatenate the lower and higher list.
	// The lower list will be at the beginning of the list. That is |why we need to reverse the lower list.
	// The higher list will be at the end of the list.|
	$list : list.join(__list-reverse($lower-list), $higher-list);

	@return $list; // Return the list of suffixes
}

/**
 * Returns string or number(as string) of suffix based on current `$i`, which have to corresponding with `$set-suffix`.
 *
 * @author - Martin Kamír
 *
 * @example
 * __get-suffix(numeric, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.2rem, 2) => 2;
 * __get-suffix(numeric-hundreds, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.2rem, 2) => 200;
 * __get-suffix(hard-suffix, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.5rem, 3) => 2-5;
 * __get-suffix((1A, 2A, 3A, 4A, 5A, 6A), (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 4rem, 4) => 4A;
 * __get-suffix(roman, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.5rem, 3) => III;
 * __get-suffix(size, (1rem, 2rem, 3rem, 4rem, 5rem), 3rem, 3) => medium;
 * __get-suffix(size-x-minmax, (1rem, 2rem, 3rem, 4rem, 5rem), 1rem, 1) => min;
 * __get-suffix(size-and-number, (1rem, 2rem, 3rem, 4rem, 5rem), 1rem, 1) => small-2;
 * __get-suffix(size-and-x, (1rem, 2rem, 3rem, 4rem, 5rem), 5rem, 5) => big-xl;
 *
 * @overload __get-suffix($set-suffix: 'numeric', $set-list-of-values, $i)
 *
 * @param $set-suffix {string} - As default set to `numeric`.
 * It is name of the set suffix that will be used in outputting the suffix.
 * Which is originally called from main `@mixin` as `suffix` parameter.
 *
 * @param $set-list-of-values {list} - List of values that are being used for generating.
 * Which is originally called from main `@mixin` as `$custom-sizes` parameter.
 *
 * @param $hard-suffix {number} - The actual value based on current index in loop which is generated. The value will be used as suffix so it is hard coded value/suffix.
 * @param $i {number} - The current index in loop.
 * @return string suffix
 */
@function __get-suffix($set-suffix: 'numeric', $length,  $i) {

	@if ($set-suffix == 'numeric') {
		@return $i; // Returns the current number based on the index

	} @else if ($set-suffix == 'numeric-hundreds') {
		@return $i + '00'; // Returns the current number based on the index and adds `00` to the end

	} @else if (meta.type-of($set-suffix) == 'list') {
		// Checks if `$set-suffix` is list. Which means that is custom suffixes list
		@return list.nth($set-suffix, $i); // Returns suffix from list based on current `$i` in loop

	} @else if (list.index(('roman', 'greek', 'military', 'planets', 'nato', 'alphabet', 'alphabet-upper', 'primary'), $set-suffix)) {
		// Get corresponding suffix list based on `$set-suffix`
		$list-of-suffixes : map.get($map-for-suffixes, $set-suffix);

		@return list.nth($list-of-suffixes, $i); // Returns suffix from list based on current `$i` in loop
	} @else if (list.index(('size', 'size-minmax', 'size-shorted', 'size-shorted-minmax', 'size-x', 'size-x-minmax', 'size-gradation', 'size-gradation-minmax', 'size-and-number', 'size-and-number-minmax', 'size-and-x', 'size-and-x-minmax'), $set-suffix)) {

		// Map which holds corresponding suffixes for `size scaling`
		$map-of-suffixes : (
				'size' : __get-suffix-list($set-suffix, $length),
				'size-minmax' : __get-suffix-list($set-suffix, $length, $minmax : true),
				'size-shorted' : __get-suffix-list($set-suffix, $length),
				'size-shorted-minmax' : __get-suffix-list($set-suffix, $length, $minmax : true),
				'size-x' : __get-suffix-list($set-suffix, $length),
				'size-x-minmax' : __get-suffix-list($set-suffix, $length, $minmax : true),
				'size-gradation' : __get-suffix-list($set-suffix, $length),
				'size-gradation-minmax' : __get-suffix-list($set-suffix, $length, $minmax : true),
				'size-and-number' : __get-suffix-list($set-suffix, $length),
				'size-and-number-minmax' : __get-suffix-list($set-suffix, $length, $minmax : true),
				'size-and-x' : __get-suffix-list($set-suffix, $length),
				'size-and-x-minmax' : __get-suffix-list($set-suffix, $length, $minmax : true)
		);

		// Loop over map and check if `$set-suffix` corresponding with `$key-suffix`
		@each $key-suffix, $list-of-suffixes in $map-of-suffixes {
			@if ($set-suffix == $key-suffix) {
				@return list.nth($list-of-suffixes, $i); // Returns suffix from list based on current `$i` in loop
			}
		}
	} @else {
		@error 'Invalid suffix type of #{$set-suffix}. Valid types are: #{__map-keys($map-for-suffixes)}';
	}
}

@function __set-suffix($set-suffix, $set-specified-suffix, $length, $i) {
	@if ($set-specified-suffix != null) {
		@return __get-suffix($set-specified-suffix, $length, $i);
	} @else {
		@return __get-suffix($set-suffix, $length, $i);
	}
}

@function _set-suffix($set-suffix, $set-specified-suffix) {
	@if ($set-specified-suffix != null) {
		@return $set-specified-suffix;
	} @else {
		@return $set-suffix;
	}
}


@function __set-prefix($set-prefix, $set-specified-prefix) {
	@if ($set-specified-prefix != null) {
		@return $set-specified-prefix;
	} @else {
		@return $set-prefix;
	}
}

@mixin __variable-body($prefix, $suffix, $value) {
	--#{$prefix}#{$suffix} : #{$value};
}

@mixin __declaration-body($prefix, $suffix, $selector: 'font-size') {
	#{$selector} : var(--#{$prefix}#{$suffix});
}

@function __class-body($prefix, $suffix,) {
	@return #{$prefix}#{$suffix};
}


@mixin generator($config: null, $base: null, $ratio: null, $length: null, $preserve: 0, $utility-classes: true, $custom-values: null, $scale: 100%, $prefix: 'f-size-', $suffix: 'numeric', $prefix-class: null, $prefix-variable: null, $suffix-class: null, $suffix-variable: null) {

	@if ($config != null) {
		$base                 : map.get($config, 'modular-scaling', 'base');
		$ratio                : map.get($config, 'modular-scaling', 'ratio');
		$length               : map.get($config, 'modular-scaling', 'length');
		$preserve             : if(map.get($config, 'modular-scaling', 'preserve') != null, map.get($config, 'modular-scaling', 'preserve'), 0);
		$utility-classes      : if(map.get($config, 'utility-classes') != null, map.get($config, 'utility-classes'), true);

		$custom-values        : map.get($config, 'custom-scaling', 'custom-values');
		$custom-values-length : list.length($custom-values);
		$breakpoint-condition : map.get($config, 'custom-scaling', 'breakpoint-condition');
		$breakpoints          : map.get($config, 'custom-scaling', 'breakpoints');
		$scale                : if(map.get($config, 'custom-scaling', 'scale') != null, map.get($config, 'custom-scaling', 'scale'), 100%);

		$prefix               : if(map.get($config, 'naming-convention', 'prefix') != null, map.get($config, 'naming-convention', 'prefix'), 'f-size-');
		$prefix-class         : map.get($config, 'naming-convention', 'prefix-class');
		$prefix-variable      : map.get($config, 'naming-convention', 'prefix-variable');
		$suffix               : if(map.get($config, 'naming-convention', 'suffix') != null, map.get($config, 'naming-convention', 'suffix'), 'numeric');
		$suffix-class         : map.get($config, 'naming-convention', 'suffix-class');
		$suffix-variable      : map.get($config, 'naming-convention', 'suffix-variable');
	}

	$custom-values-length      : list.length($custom-values);
	$prefix-specified-class    : $prefix-class;
	$prefix-specified-variable : $prefix-variable;
	$suffix-specified-class    : $suffix-class;
	$suffix-specified-variable : $suffix-variable;
	$variable-prefix           : __set-prefix($prefix, $prefix-specified-variable); // Variable prefix based on called `$prefix` or `$prefix-variable` parameters. `$prefix-variable` have bigger priority than `$prefix`.

	////////////////////////////////////////
	// Checks if `$custom-values` is list.
	// List gives better options of easy/fast modification than map, because we can fast generate the prefix name or suffix, but it has own limitation.
	// By using list it's possible use custom values. Which gives more control of values rather than generated scalable values.
	@if (meta.type-of($custom-values) == list) {
		@for $i from 1 through list.length($custom-values) {
			$value           : __scale-number(list.nth($custom-values, $i), $scale); // Value of current `$i` in loop from list of custom values. The value is scaled based on `$scale` value. As default `$scale` is set to 100%.
			$hard-suffix     : $value;
			$variable-suffix : __set-suffix($suffix, $suffix-specified-variable, $custom-values-length, $i); // Variable suffix based on called `$suffix` or `$suffix-variable` parameters. `$suffix-variable` have bigger priority than `$suffix`.

			// !IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$prefix-variable`, `$suffix-variable` and `$value`.
			@include __variable-body($variable-prefix, $variable-suffix, $value);

			@if ($utility-classes) {
				$class-prefix : __set-prefix($prefix, $prefix-specified-class); // Class prefix based on called `$prefix` or `$prefix-class` parameters. `$prefix-class` have bigger priority than `$prefix`.
				$class-suffix : __set-suffix($suffix, $suffix-specified-class, $custom-values-length, $i); // Class suffix based on called `$suffix` or `$suffix-class` parameters. `$suffix-class` have bigger priority than `$suffix`.

				// !IMPORTANT! - The actual class which is outputted. The class is outputted based on `$prefix-class` and `$suffix-class`.
				@at-root .#{__class-body($class-prefix, $class-suffix)} {

					// !IMPORTANT! - The actual declaration line which is outputted. The declaration is outputted based on `$prefix-class` and `$suffix-class`.
					@include __declaration-body($variable-prefix, $variable-suffix);
				}
			}
		}


		@if ($config != null and map.has-key($config,'custom-scaling', 'breakpoint-condition')) {
			$breakpoint-condition : map.get($config, 'custom-scaling', 'breakpoint-condition');
			$breakpoints          : map.get($config, 'custom-scaling', 'breakpoints');
			$breakpoints-length   : list.length($breakpoints);


			@for $x from 1 through list.length($breakpoints) {
				$breakpoint-key         : list.nth(list.nth($breakpoints, $x), 1);
				$breakpoint-list        : list.nth(list.nth($breakpoints, $x), 2);
				$breakpoint-list-length : list.length($breakpoint-list);

				@include breakpoint($breakpoint-condition, $breakpoint-key) {

					$x    : $custom-values-length;
					$y    : 1;
					$diff : $custom-values-length - $breakpoint-list-length + 1;
					@debug $diff;
					@while $diff <= $x {

						$value           : __scale-number(list.nth($breakpoint-list, $y), $scale); // Value of current `$i` in loop from list of custom values. The value is scaled based on `$scale` value. As default `$scale` is set to 100%.
						$hard-suffix     : $value;
						$variable-suffix : __set-suffix($suffix, $suffix-specified-variable, $custom-values-length, $diff); // Variable suffix based on called `$suffix` or `$suffix-variable` parameters. `$suffix-variable` have bigger priority than `$suffix`.

						// !IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$prefix-variable`, `$suffix-variable` and `$value`.
						@include __variable-body($variable-prefix, $variable-suffix, $value);
						$diff            : $diff + 1;
						$y               : $y + 1;
					}
				}
			}

		}


		////////////////////////////////////////
		// Checks if `$custom-values` is map.
		// Map gives more global usage. Means the same map can be used in different places throughout the code.
		// Map is easier to use than list, because it's not that abstracted away unlike list or generating scalable values.
		// The modification of map is unlimited, but changing values in map can be more repetitive and time consuming. List or generated scalable values have faster way of modification.
		// Like list by using map it's possible use custom values. Which gives more control of values rather than generated scalable
	} @else if (meta.type-of($custom-values) == map) {
		$map                      : $custom-values;

		@if (map.has-key($map, 'breakpoint-condition')) {
			$breakpoint-condition : map.get($map, 'breakpoint-condition');
			$map                  : map.remove($map, 'breakpoint-condition');

			@if ($breakpoint-condition == 'min' or $breakpoint-condition == 'max') {
				@each $breakpoint, $map-values in $map {
					@if ($breakpoint == 'default') {
						@each $key, $value in $map-values {
							@if (meta.type-of($key) != string) {
								@error 'Invalid type: Parameter `$custom-values` at mixin NECO, must be a map with keys of type string.';
							} @else if (string.length($key) < 1) {
								@error 'Invalid length: Parameter `$custom-values` at mixin NECO, must be a map with keys of length greater than 0.';
							} @else if (meta.type-of($value) != number and meta.type-of($value) != string) {
								@error 'Invalid type: Outputted values must be type of number OR STRING FIX ERRORS YOU LAZZY SHIT.';
							}

							$value    : __scale-number($value, $scale);

							--#{$key} : #{$value};

							@if (utility-classes) {
								// !IMPORTANT! - The actual class which is outputted. The class is outputted based on `$key`.
								@at-root .#{$key} {
									// !IMPORTANT! - The actual declaration line which is outputted. The declaration is outputted based on `$key`.
									font-size : var(--#{$key});
								}
							}
						}
					} @else {
						@include breakpoint($breakpoint-condition, $breakpoint) {
							@each $key, $value in $map-values {

								@if (meta.type-of($key) != string) {
									@error 'Invalid type: Parameter `$custom-values` at mixin NECO, must be a map with keys of type string.';
								} @else if (string.length($key) < 1) {
									@error 'Invalid length: Parameter `$custom-values` at mixin NECO, must be a map with keys of length greater than 0.';
								} @else if (meta.type-of($value) != number and meta.type-of($value) != string) {
									@error 'Invalid type: Outputted values must be type of number OR STRING FIX ERRORS YOU LAZZY SHIT.';
								}

								$value    : __scale-number($value, $scale);

								--#{$key} : #{$value};
							}
						}
					}

				}
			} @else {
				@error 'Invalid key value: `breakpoint-condition` must be either `min` or `max` not `#{$breakpoint-condition}`.';
			}

		} @else {

			@each $key, $value in $map {
				$value    : __scale-number($value, $scale); // Value of current `$key` in each loop from map of custom values. The value is scaled based on `$scale` value. As default `$scale` is set to 100%.

				//!IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$key` and `$value`.
				--#{$key} : #{$value};

				@if (utility-classes) {
					// !IMPORTANT! - The actual class which is outputted. The class is outputted based on `$key`.
					@at-root .#{$key} {
						// !IMPORTANT! - The actual declaration line which is outputted. The declaration is outputted based on `$key`.
						font-size : var(--#{$key});
					}
				}
			}

			@if ($config != null and map.has-key($config,'custom-scaling', 'breakpoint-condition')) {
				$breakpoint-condition : map.get($config, 'custom-scaling', 'breakpoint-condition');
				$breakpoints          : map.get($config, 'custom-scaling', 'breakpoints');

				@each $breakpoint-key, $breakpoint-map in $breakpoints {
					@include breakpoint($breakpoint-condition, $breakpoint-key) {
						@each $key, $value in $breakpoint-map {
							$value    : __scale-number($value, $scale); // Value of current `$key` in each loop from map of custom values. The value is scaled based on `$breakpoint-value` value. As default `$breakpoint-value` is set to 100%.

							//!IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$key` and `$value`.
							--#{$key} : #{$value};
						}
					}
				}
			}
		}


		////////////////////////////////////////
		// Generates scalable values.
		// Values are generated based on `$base`, `$ratio` and `$length` values.
		// Generating modular type scale is the fastest way of creating scalable sizes.
		// Easy to control with two properties, which is --base and --ratio css properties that can be modified any time and all the values will adjust to that.
		// By using `$preserve` parameter we can prevent the first values in type scale won't adjust. Good usage is for the smaller values like 0.5rem - 2rem that we don't want to adjust.
		//
	} @else {
		--#{$variable-prefix}base : #{$base}; // The base value, which is the first value in type scale and all the next values are generated from this value.

		// Checks if `$ratio` is string.
		//`$ratio` parameter can be number or string
		@if (meta.type-of($ratio) == string) {
			$ratio  : map.get($map-for-ratios, $ratio); // If `$ratio` is string, then check in the `$map-for-ratios`, which ratio to use.
			--ratio : #{$ratio}; // Outputs the ratio number value.
		} @else {
			--ratio : #{$ratio}; // Else just output the `$ratio` based on the parameter.
		}

		// Loop over the `$length` parameter and generate from that number the scalable values.
		@for $i from 1 through $length {
			$hard-suffix     : 'none'; // Hard suffix is disabled. In my opinion with scalable values wouldn't be good idea to have hard suffix values.
			$variable-suffix : __set-suffix($suffix, $suffix-specified-variable, $length, $i); // Variable suffix based on called `$suffix` or `$suffix-variable` parameters. `$suffix-variable` have bigger priority than `$suffix`.

			// Checks if there will be any value preserved.
			@if ($preserve == 0) {

				// At first iteration in the loop
				@if ($i == 1) {
					// !IMPORTANT -  The actual value which is outputted. Calculating the `$base` value with `$ratio`.
					$value                  : calc(var(--#{$variable-prefix}base) * var(--ratio));

					// !IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$variable-prefix`, variable-suffix` and `$value`.
					@include __variable-body($variable-prefix, $variable-suffix, $value);

					// In next iterations
				} @else {
					$variable-suffix-before : __set-suffix($suffix, $suffix-specified-variable, $length, $i - 1); // Variable suffix from the previous iteration. So we can chain all the values and generate the scalable values.

					// !IMPORTANT -  The actual value which is outputted. Calculating the previous variable value with `$ratio`.
					$value                  : calc(var(--#{$variable-prefix}#{$variable-suffix-before}) * var(--ratio));

					// !IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$variable-prefix`, variable-suffix` and `$value`.
					@include __variable-body($variable-prefix, $variable-suffix, $value);
				}

				// If utility classes are true do as mentioned above.
				@if ($utility-classes) {
					$class-prefix : __set-prefix($prefix, $prefix-specified-class);
					$class-suffix : __set-suffix($suffix, $suffix-specified-class, $length, $i);

					@at-root .#{__class-body($class-prefix, $class-suffix)} {
						@include __declaration-body($variable-prefix, $variable-suffix);
					}
				}

				// Else if there are any values which has to be preserved.
			} @else {

				// At first iteration in the loop
				@if ($i == 1) {
					// !IMPORTANT -  The actual value which is outputted. By using `__get-value` function.
					$value                  : __get-value($base, $ratio, $preserve, $i, $variable-prefix);

					// !IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$variable-prefix`, variable-suffix` and `$value`.
					@include __variable-body($variable-prefix, $variable-suffix, $value);

					// In next iterations
				} @else {
					$variable-suffix-before : __set-suffix($suffix, $suffix-specified-variable, $length, $i - 1); // Variable suffix from the previous iteration. So we can chain all the values and generate the scalable values.

					// !IMPORTANT -  The actual value which is outputted. By using `__get-value` function.
					$value                  : __get-value($base, $ratio, $preserve, $i, $variable-prefix, $variable-suffix-before);

					// !IMPORTANT! - The actual variable which is outputted. The variable is outputted based on `$variable-prefix`, variable-suffix` and `$value`.
					@include __variable-body($variable-prefix, $variable-suffix, $value);
				}

				// If utility classes are true do as mentioned above.
				@if ($utility-classes) {
					$class-prefix : __set-prefix($prefix, $prefix-specified-class);
					$class-suffix : __set-suffix($suffix, $suffix-specified-class, $length, $i);

					@at-root .#{__class-body($class-prefix, $class-suffix)} {
						@include __declaration-body($variable-prefix, $variable-suffix);
					}
				}
			}
		}
	}
}

@mixin generatorA($config) {
	$base              : map.get($config, 'base');
	$ratio             : map.get($config, 'ratio');
	$length            : map.get($config, 'length');
	$preserve          : map.get($config, 'preserve');
	$utility-classes   : map.get($config, 'utility-classes');
	$src               : map.get($config, 'src');
	$break-at          : map.get($config, 'break-at');
	$breakpoints       : map.get($config, 'breakpoints');
	$scale             : map.get($config, 'scale');
	$prefix            : map.get($config, 'prefix');
	$prefix-class      : map.get($config, 'prefix-class');
	$prefix-variable   : map.get($config, 'prefix-variable');
	$suffix            : map.get($config, 'suffix');
	$suffix-class      : map.get($config, 'suffix-class');
	$suffix-variable   : map.get($config, 'suffix-variable');

	$src-length        : list.length($src);
	$prefix-c          : __set-prefix($prefix, $prefix-class);
	$prefix-v          : __set-prefix($prefix, $prefix-variable);
	$suffix-c          : _set-suffix($suffix, $suffix-class);
	$suffix-v          : _set-suffix($suffix, $suffix-variable);
	$ratio             : if(map.has-key($map-for-ratios, $ratio), map.get($map-for-ratios, $ratio), $ratio);

	--ratio            : #{$ratio};
	--#{$prefix-v}base : #{$base};


	@for $i from 1 through $length {
		$variable-suffix : __set-suffix($suffix, $suffix-variable, $length, $i);

		@if ($preserve == 0) {
			@if ($i == 1) {
				$value                  : calc(var(--#{$prefix-v}base) * var(--ratio));

				@include __variable-body($prefix-v, $variable-suffix, $value);

			} @else {
				$variable-suffix-before : __set-suffix($suffix, $suffix-variable, $length, $i - 1);
				$value                  : calc(var(--#{$prefix-v}#{$variable-suffix-before}) * var(--ratio));

				@include __variable-body($prefix-v, $variable-suffix, $value);
			}

			@if ($utility-classes) {
				$class-prefix : __set-prefix($prefix, $prefix-class);
				$class-suffix : __set-suffix($suffix, $suffix-class, $length, $i);

				@at-root .#{__class-body($class-prefix, $class-suffix)} {
					@include __declaration-body($prefix-v, $variable-suffix);
				}
			}

		} @else {
			@if ($i == 1) {

				$value                  : __get-value($base, $ratio, $preserve, $i, $prefix-v);

				@include __variable-body($prefix-v, $variable-suffix, $value);


			} @else {
				$variable-suffix-before : __set-suffix($suffix, $suffix-variable, $length, $i - 1);

				$value                  : __get-value($base, $ratio, $preserve, $i, $prefix-v, $variable-suffix-before);

				@include __variable-body($prefix-v, $variable-suffix, $value);
			}

			@if ($utility-classes) {
				$class-suffix : __set-suffix($suffix, $suffix-class, $length, $i);

				@at-root .#{__class-body($prefix-c, $class-suffix)} {
					@include __declaration-body($prefix-v, $variable-suffix);
				}
			}
		}
	}
}

;

@function _config-get($config, $key) {
	@if meta.type-of($config) != map {
		@error "Invalid type parameter: '$config' must be a map.";
	}

	@if map.has-key($config, $key) {
		@return map.get($config, $key);
	} @else {
		@return $config;
	}
}

@mixin _validate-keys($map) {
	$valid-keys : ('selector', 'base', 'ratio', 'length', 'preserve', 'utility-classes', 'src', 'scale', 'prefix', 'suffix', 'prefix-class', 'prefix-variable', 'suffix-class', 'suffix-variable', 'break-at', 'breakpoints');
	$keys       : ();

	@each $key, $value in $map {
		$keys : list.append($keys, $key);

		@if meta.type-of($value) == map {
			$map : map.deep-remove($map, $value);
			$map : map.merge($map, $value);
		}

		@each $key, $value in $map {
			@if meta.type-of($key) != string {
				@error "Invalid key '#{$key}': all keys must be a string in the map.";
			} @else if string.length($key) < 1 {
				@error "Invalid key length: all keys must be at least 1 character in the map.";
			}
		}
	}

	@for $i from 1 through list.length($keys) {
		@if (list.nth($valid-keys, $i) != list.nth($keys, $i)) {
			@error "Invalid parameter '#{list.nth($keys, $i)}': must be one of #{$valid-keys}.";
		}
	}
}

@mixin _validate-config-parameters($config) {

	@include _validate-keys($config);

	$base            : map.get($config, 'base');
	$ratio           : map.get($config, 'ratio');
	$length          : map.get($config, 'length');
	$preserve        : map.get($config, 'preserve');
	$utility-classes : map.get($config, 'utility-classes');
	$src             : map.get($config, 'src');
	$break-at        : map.get($config, 'break-at');
	$breakpoints     : map.get($config, 'breakpoints');
	$scale           : map.get($config, 'scale');
	$prefix          : map.get($config, 'prefix');
	$prefix-class    : map.get($config, 'prefix-class');
	$prefix-variable : map.get($config, 'prefix-variable');
	$suffix          : map.get($config, 'suffix');
	$suffix-class    : map.get($config, 'suffix-class');
	$suffix-variable : map.get($config, 'suffix-variable');


	@if ($base != null or $ratio != null or $length != 1 or $preserve != 0) and
		($src != null or $break-at != null or $breakpoints != null or $scale != 100%) {
		@error "Invalid set of parameters: 'base', 'ratio', 'length', 'preserve' AND 'src', 'break-at', 'breakpoints', 'scale' are mutually exclusive.";
	}

	@if (meta.type-of($src) == map) and
		($prefix != 'f-size-' or $prefix-class != null or $prefix-variable != null or $suffix != 'numeric' or $suffix-class != null or $suffix-variable != null) and
		($src != null or $break-at != null or $breakpoints != null or $scale != 100%) {
		@error "Invalid set of parameters: Using 'src' as type of map with 'src', 'break-at', 'breakpoints', 'scale' AND 'prefix', 'prefix-class', 'prefix-variable', 'suffix', 'suffix-class', 'suffix-variable' are mutually exclusive. Using 'src' as type of list is allowed with prefixes/suffixes.";
	}

	@if (meta.type-of($base) != 'null' and meta.type-of($base) != number) or
		 (meta.type-of($ratio) != 'null' and meta.type-of($ratio) != string and meta.type-of($ratio) != number) or
		 (meta.type-of($length) != number) or
		 (meta.type-of($utility-classes) != bool) or
		 (meta.type-of($src) != 'null' and meta.type-of($src) != map and meta.type-of($src) != list and meta.type-of($src) != arglist and meta.type-of($src) != number) or
		 (meta.type-of($break-at) != 'null' and meta.type-of($break-at) != string) or
		 (meta.type-of($breakpoints) != 'null' and meta.type-of($breakpoints) != map) or
		 (meta.type-of($scale) != number) or
		 (meta.type-of($prefix) != string) or
		 (meta.type-of($prefix-class) != 'null' and meta.type-of($prefix-class) != string) or
		 (meta.type-of($prefix-variable) != 'null' and meta.type-of($prefix-variable) != string) or
		 (meta.type-of($suffix) != string) or
		 (meta.type-of($suffix-class) != 'null' and meta.type-of($suffix-class) != string) or
		 (meta.type-of($suffix-variable) != 'null' and meta.type-of($suffix-variable) != string) {
		@error 'Invalid type value: check if values hold the corresponding type.';
	}

	@if (meta.type-of($base) != 'null' and $base < 0) or ($scale < 0) {
		@error "Invalid value: 'base', 'length', 'scale' must be greater than or equal to 0.";
	}

	@if meta.type-of($base) != 'null' and math.is-unitless($base) {
		@error "Invalid value: 'base' must be a number with a unit.";
	}

	@if (meta.type-of($ratio) != string and meta.type-of($ratio) != 'null' and  math.is-unitless($ratio) != true) or
		(math.is-unitless($preserve) != true) or
		(math.is-unitless($length) != true) {
		@error "Invalid value: 'ratio', 'preserve', 'length' must be a number with no unit.";
	}

	@if math.round($preserve) != $preserve or math.round($length) != $length {
		@error "Invalid value: 'preserve', 'length' must be an integer.";
	}

	@if meta.type-of($ratio) != 'null' and map.has-key($map-for-ratios, $ratio) != true {
		@error "Invalid value: 'ratio' must be one of #{__map-keys($map-for-ratios)}.";
	}

	@if $preserve > $length {
		@error "Invalid value: 'preserve' must be less than or equal to 'length'.";
	}

	@if $length > 40 or $length < 1 {
		@error "Invalid value: 'length' must be between 1 and 40.";
	};

	@if (math.unit($scale) != '%') {
		@error "Invalid value: 'scale' must be a percentage.";
	}

	@if ($break-at != null and $break-at != 'min' and $break-at != 'max') {
		@error "Invalid value: 'break-at' must be 'min' or 'max'.";
	}
}

@mixin generate-font-scales($config: null, $base: null, $ratio: null, $length: 1, $preserve: 0, $utility-classes: true, $src: null, $scale: 100%, $prefix: 'f-size-', $suffix: 'numeric', $prefix-class: null, $prefix-variable: null, $suffix-class: null, $suffix-variable: null) {
	$key     : 'font-scales';
	$_config : (
			'selector' : 'font-size',
			'base' : $base,
			'ratio' : $ratio,
			'length' : $length,
			'preserve' : $preserve,
			'utility-classes' : $utility-classes,
			'src' : $src,
			'scale' : $scale,
			'prefix' : $prefix,
			'suffix' : $suffix,
			'prefix-class' : $prefix-class,
			'prefix-variable' : $prefix-variable,
			'suffix-class' : $suffix-class,
			'suffix-variable' : $suffix-variable,
	);


	@if $config != null {
		$_config : map.deep-merge($_config, _config-get($config, $key));
	}

	@include _validate-config-parameters($_config);
	@include generatorA($_config)
}

@mixin generate-flow-scales($config, $base: null, $ratio: null, $length: 0, $preserve: 0, $utility-classes: true, $src: null, $scale: 100%, $prefix: 'space-', $suffix: 'numeric', $prefix-class: null, $prefix-variable: null, $suffix-class: null, $suffix-variable: null) {
	$key     : 'flow-scales';
	$_config : (
			'selector' : 'none',
			'base' : $base,
			'ratio' : $ratio,
			'length' : $length,
			'preserve' : $preserve,
			'utility-classes' : $utility-classes,
			'src' : $src,
			'scale' : $scale,
			'prefix' : $prefix,
			'suffix' : $suffix,
			'prefix-class' : $prefix-class,
			'prefix-variable' : $prefix-variable,
			'suffix-class' : $suffix-class,
			'suffix-variable' : $suffix-variable,
	);


	@if $config != null {
		$_config : map.deep-merge($_config, _config-get($config, $key));
	}

	@include _validate-config-parameters($_config);
	@include generatorA($_config);

}


$config-ultimate : (
		'font-scales' : (
				'src' : $list-f,
				'break-at' : 'max',
				'breakpoints': (
						'pc-xs' : $list-fmin,
						'tablet-max' : $list-fminer,
						'phone-max' : $list-fminest,
				),
				'prefix' : 'text-',
		),
		'flow-scales' : (
				'base' : 1rem,
				'ratio' : 'major-second',
				'length' : 10,
		),
		'fluid-fonts' : (
			// config
		),
		'fluid-spaces' : (
			// config
		),
	//'colors-scale' : ('map'),
		'colors-scale' : (
				'scale' : (20%, 40%, 80%),
				'primary' : crimson,
				'secondary' : (
						'default' : #555555,
						'lighter' : #555555,
						'light' : #555555,
						'dark' : #555555,
						'darker' : #555555,
				),
				'tertiary' : ('list'),
				'text' : #000000,
				'surface' : #ffffff,
				'btn-primary' : #333333,
				'btn-secondary' : crimson,
				'socials' :('facebook', 'twitter', 'instagram', 'pinterest', 'youtube', 'linkedin'),
			//'state' : ('map'),
			//'state' : true,
				'state' : (
						'error' : #333333,
						'warning' : #333333,
						'success' : #333333,
				),
		),
		'properties' : ($map-for-letterspacing, $map-for-shadows,),
		'line-height' : (
				'src' : ('list'),
				'prefix' : 'line-height-',
				'suffix' : 'roman',
		),
);

$test-config     : (
		'base' : 1rem,
		'ratio' : 'major-second',
		'length' : 10,
		'preserve' : 5,
		'suffix-variable' : 'roman',
);

:root {
	//--f-size-asd : 6rem;
	//@include generate-font-scales($test-config);
	//@include generate-font-scales($base : 5rem, $ratio: 1.125, $length: 10);
	//@include generate-font-scales($config-ultimate);
	//@include generate-flow-scales($test-config);
	@include generate-font-scales($test-config);
	//@include generate-flow-scales($config-ultimate);

	//@include generator($custom-values : $list-f, $prefix : 'text-', $suffix : 'numeric', $utility-classes : false);
	//@include generator($custom-values : $list-fa, $prefix : 'size-', $suffix : 'size-x-minmax', $utility-classes : false);
	//@include generator($config);
	//@include generator($custom-values : $map-f, $scale : 100%);
	//@include generator($base : 2rem, $ratio : 'major-second', $length : 9, $prefix: 'text-', $suffix-variable: 'size-and-x-minmax');

	@include breakpoint(max, 1000px) {
	}
}

/*
@mixin generate-fluid-fonts($config) {
	// do something
}

@mixin generate-fluid-flows($config) {
	// do something
}

@mixin generate-colors-scale($config) {
	// do something
}

@mixin generate-properties($config) {
	// do something
}

@mixin generator($config) {
	// do something
}


*/
