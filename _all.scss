@charset "UTF-8";
@use "sass:string";
@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "sass:list";
@use "sass:color";

@import 'functions/layer';
@import 'functions/clamped';
@import 'functions/em';

@import 'lists/list-of-directions';
@import 'lists/list-of-layers';
@import 'lists/list-of-font-sizes';
@import 'lists/list-of-fluid-fonts';
@import 'lists/list-of-space-sizes';
@import 'lists/list-of-fluid-spaces';

@import 'maps/map-for-animations';
@import 'maps/map-for-aspect-ratios';
@import 'maps/map-for-breakpoints';
@import 'maps/map-for-colors';
@import 'maps/map-for-borders';
@import 'maps/map-for-flexbox';
@import 'maps/map-for-fluid-sizes';
@import 'maps/map-for-font-weights';
@import 'maps/map-for-content-sizes';
@import 'maps/map-for-directions';
@import 'maps/map-for-easing';
@import 'maps/map-for-letter-spacings';
@import 'maps/map-for-line-heights';
@import 'maps/map-for-shadows';
@import 'maps/map-for-radius';
@import 'maps/map-for-ratios';
@import 'maps/map-for-shadows';
@import 'maps/map-for-suffixes';

@import 'utilities/class-shell';
@import 'utilities/clear-unit';
@import 'utilities/clear-whitespace';
@import 'utilities/convert-to-number';
@import 'utilities/create-suffix-list';
@import 'utilities/declaration-shell';
@import 'utilities/decide-calc-method';
@import 'utilities/get-value';
@import 'utilities/get-name';
@import 'utilities/get-suffix';
@import 'utilities/is-color';
@import 'utilities/is-number';
@import 'utilities/is-time';
@import 'utilities/list-slice';
@import 'utilities/list-reverse';
@import 'utilities/map-deep-get';
@import 'utilities/map-deep-set';
@import 'utilities/map-keys';
@import 'utilities/null';
@import 'utilities/remove-unit';
@import 'utilities/number-slice';
@import 'utilities/number-round';
@import 'utilities/number-scale';
@import 'utilities/string-replace';
@import 'utilities/to-list';
@import 'utilities/validate-breakpoint';
@import 'utilities/validate-config-map';
@import 'utilities/validate-config-keys';
@import 'utilities/validate-config';
@import 'utilities/validate-length';
@import 'utilities/validate-ratio';
@import 'utilities/variable-shell';
@import 'utilities/generate-types-scale';
@import 'utilities/process-config';

@import 'library/absolute';
@import 'library/breakpoint-landscape';
@import 'library/breakpoint';
@import 'library/except';
@import 'library/fixed';
@import 'library/flex';
@import 'library/hide';
@import 'library/animation';
@import 'library/loadify';
@import 'library/only';
@import 'library/remove';
@import 'library/screen-agent';
@import 'library/text-shadow';
@import 'library/text-stroke';
@import 'library/generate-fluid-font-types';
@import 'library/generate-fluid-space-types';
@import 'library/generate-font-types';
@import 'library/generate-space-types';
@import 'library/generate-classes';
@import 'library/generate-properties';
@import 'library/generator';

$map-colors      : ('primary': hsl(350, 100%, 38%), 'secondary': hsl(207, 56%, 48%));
//$map-colors      : ('primary': hsl(350, 100%, 38%));
//$map-colors-dark : ('primary': hsl(350, 100%, 26%));
$map-colors-dark : ('primary': hsl(350, 100%, 26%), 'secondary': hsl(207, 100%, 17%));
$map-for-dark    : (
		'primary-1' : hsl(350, 100%, 21%),
		'primary-2' : hsl(350, 100%, 28%),
		'primary-3' : hsl(350, 100%, 22%),
		'secondary-1' : hsl(206, 100%, 19%),
		'secondary-2' : hsl(205, 100%, 15%),
		'secondary-3' : hsl(218, 100%, 9%),
		'neutral-1' : hsl(0, 0%, 27%),
		'neutral-2' : hsl(0, 0%, 15%),
		'neutral-3' : hsl(0, 0%, 5%),
);

$config          : (
		'fluid-font-types' : (
			//'base' : clamp(1.6rem, 1.89vw + 0.58rem, 3rem),
				'base' : clamped(1.6rem, 3rem),
				'ratio' : 'minor-second',
				'length' : 10,
				'suffix' : 'nato',
				'breakpoints' : (
						'tablet-min' : ('base' : clamped(1rem, 2rem)),
				)
		),
		'properties' : (
			//'predefined' : true,
				'src' : ($map-for-font-weights, $map-for-letter-spacings),
		),
		'classes' : (
				'predefined' : true,
			//'src' : ($map-for-font-weights, $map-for-letter-spacings),
		)
);

@function get-hsl($value, $hsl: true) {
	$hue : math.round(color.hue($value));
	$saturation : math.round(color.saturation($value));
	$lightness : math.round(color.lightness($value));

	@if $hsl {
		@return hsl($hue, $saturation, $lightness);
	} @else {
		@return '#{$hue, $saturation, $lightness}';
	}
}

@mixin _generate-color-utilities($utility-classes, $is-allowed, $prefix-text, $prefix-background, $key, $suffix, $value) {
	@if $utility-classes and $is-allowed {
		@at-root .#{$prefix-text}#{$key}#{$suffix} {
			@include _declaration-shell($key, $suffix, $value, 'color');
		}

		@at-root .#{$prefix-background}#{$key}#{$suffix} {
			@include _declaration-shell($key, $suffix, $value, 'background-color');
		}
	}
}

@mixin _generate-colors($config, $is-allowed, $value, $key) {
	$suffix            : 'numeric';
	$tints             : (80%, 40%);
	$shades            : (40%, 80%);
	$hsl               : true;
	$utility-classes   : true;
	$prefix-text       : 'text-';
	$prefix-background : 'surface-';

	////////////////
	$_suffix           : '';
	$colors-list       : ();

	@if $suffix != 'color-adjectives' {
		@if $tints != null {
			@for $x from 1 through length($tints) {
				$_value      : get-hsl(mix(white, $value, list.nth($tints, $x)), $hsl);
				$colors-list : list.append($colors-list, $_value);
			}
		}

		$_value      : get-hsl($value, $hsl);
		$colors-list : list.append($colors-list, $_value);

		@if $shades != null {
			@for $x from 1 through length($shades) {
				$_value      : get-hsl(mix(black, $value, list.nth($shades, $x)), $hsl);
				$colors-list : list.append($colors-list, $_value);
			}
		}

		@for $x from 1 through length($colors-list) {
			$_suffix : '-#{_get-suffix($suffix, length($colors-list), $x)}';
			$value   : list.nth($colors-list, $x);

			@include _variable-shell($key, $_suffix, $value);
			@include _generate-color-utilities($utility-classes, $is-allowed, $prefix-text, $prefix-background, $key, $_suffix, $value);
		}
	}

	@if $suffix == 'color-adjectives' {
		@if $tints != null {
			@for $x from 1 through length($tints) {
				$_value  : get-hsl(mix(white, $value, list.nth($tints, $x)), $hsl);
				$_suffix : '-#{_get-suffix($suffix, length($tints), $x, 'lighter-values')}';

				@include _variable-shell($key, $_suffix, $_value);
				@include _generate-color-utilities($utility-classes, $is-allowed, $prefix-text, $prefix-background, $key, $_suffix, $value);
			}
		}

		$_value  : get-hsl($value, $hsl);
		$_suffix : '';

		@include _variable-shell($key, $_suffix, $_value);
		@include _generate-color-utilities($utility-classes, $is-allowed, $prefix-text, $prefix-background, $key, $_suffix, $value);

		@if $shades != null {
			@for $x from 1 through length($shades) {
				$_value  : get-hsl(mix(black, $value, list.nth($shades, $x)), $hsl);
				$_suffix : '-#{_get-suffix($suffix, length($shades), $x, 'darker-values')}';

				@include _variable-shell($key, $_suffix, $_value);
				@include _generate-color-utilities($utility-classes, $is-allowed, $prefix-text, $prefix-background, $key, $_suffix, $value);
			}
		}
	}

	@if $suffix == null {
		@include _variable-shell($key, $_suffix, $value);
		@include _generate-color-utilities($utility-classes, $is-allowed, $prefix-text, $prefix-background, $key, $_suffix, $value);
	}

	$colors-list       : ();
}


@mixin _preprocess-colors($config: null, $src: null, $src-dark: null, $shades: null, $tints: null, $hsl: true, $utility-classes: true, $prefix-text: 'text-', $prefix-background: 'surface-', $suffix: 'numeric') {
	$generate-dark-scheme : false;
	$map                  : $src;
	$colors-list          : ();

	@for $i from 1 through if($src-dark == null, 1, 2) {
		@if length($src) == 1 {
			@if $src-dark != null and $i > length($map) {
				$map                  : $src-dark;
				$generate-dark-scheme : true;
			}
		} @else {
			@if $src-dark != null and $i >= length($map) {
				$map                  : $src-dark;
				$generate-dark-scheme : true;
			}
		}


		@if $generate-dark-scheme == false {
			@each $key, $value in $map {
				@include _generate-colors(null, true, $value, $key);
			}
		} @else {
			@media (prefers-color-scheme : dark) {
				@each $key, $value in $map {
					@include _generate-colors(null, false, $value, $key);
				}
			}
		}
	}
}

@mixin _generate-color-types($config: null, $src: null, $src-dark: null, $tints: null, $shades: null, $hsl: true, $utility-classes: true, $prefix-text: 'text-', $prefix-background: 'surface-', $suffix: 'numeric') {
	$_config : (
			'src' : $src,
			'src-dark' : $src-dark,
			'tints' : $tints,
			'shades' : $shades,
			'hsl' : $hsl,
			'utility-classes' : $utility-classes,
			'prefix-text' : $prefix-text,
			'prefix-background' : $prefix-background,
			'suffix' : $suffix,
	);

	$key     : 'color-types';

	@if $config != null {
		$_config : map.deep-merge($_config, _validate-config-map($config, $key));
	}

	@include _validate-config($_config);
}


$config          : (
		'color-types' : (
				'src' : $map-colors,
				'src-dark' : $map-colors-dark,
				'tints' : (80%, 40%),
				'shades' : (40%, 80%),
				'suffix' : 'numeric',
		)
);


:root {
	@include _generate-color-types($config);
	//@include _generate-color-types($src : $map-colors, $src-dark : $map-colors-dark, $tints : (80%, 40%), $shades : (40%, 80%), $suffix : 'numeric');
	//@include _preprocess-colors($src : $map-for-colors, $src-dark : $map-for-dark);
	@include _preprocess-colors($src : $map-colors, $src-dark : $map-colors-dark, $tints : (80%, 40%), $shades : (40%, 80%), $suffix : 'numeric');
	//@include _preprocess-colors($src : $map-colors, $tints : (40%), $shades : (80%), $suffix : 'color-adjectives');
	//@include generate-font-types($base : 3rem, $ratio : 'minor-second', $length : 5, $suffix : 'size-x-minmax');
	//@include generate-font-types($base : 3rem, $ratio : 'minor-second', $length : 5);
	//@include generate-fluid-font-types($config);
	//@include generate-fluid-font-types($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-space-types($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-font-scales($base : clamp(1.6rem, 1.89vw + 0.58rem, 3rem), $ratio : 'minor-second', $length : 10);
	//@include generate-fluid-font-scales($src : $list-of-fluid-fonts);
	//@include generate-space-scales($base : 1rem, $ratio : 'minor-second', $length : 10);
	//
	//
	//@include generate-properties(
	//				$map-for-font-weights,
	//				$map-for-aspect-ratios,
	//				$map-for-borders,
	//				$map-for-content-sizes,
	//				$map-for-letter-spacings,
	//				$map-for-line-heights,
	//				$map-for-shadows,
	//				$map-for-easing,
	//				$map-for-animations,
	//);

	//@include generate-classes(
	//				$map-for-font-weights,
	//				$map-for-letterspacings,
	//				$map-for-lineheights,
	//				$map-for-shadows,
	//);

	//@include generate-classes(predefined);
	//@include generate-classes(config);
	//@include generate-properties(config);
	//@include generate-classes($map-for-font-weights);
}

