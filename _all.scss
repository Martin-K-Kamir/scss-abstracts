@charset "UTF-8";
@use "sass:string";
@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "sass:list";

@import './lists/list-of-directions';
@import './lists/list-of-layers';

@import './properties/aspect-ratios';
@import './properties/borders';
@import './properties/breakpoints';
@import './properties/color-palette';
@import './properties/easing';
@import './properties/animations';
@import './properties/shadows';
@import './properties/sizes';
@import './properties/typography';
@import './properties/tokens';

@import './maps/map-for-borders';
@import './maps/map-for-breakpoints';
@import './maps/map-for-flexbox';
@import './maps/map-for-font-weights';
@import './maps/map-for-font-sizes';
@import './maps/map-for-colors';
@import './maps/map-for-directions';
@import './maps/map-for-laptops';
@import './maps/map-for-letterspacing';
@import './maps/map-for-lineheights';
@import './maps/map-for-pc';
@import './maps/map-for-shadows';
@import './maps/map-for-sizes';
@import './maps/map-for-phones';
@import './maps/map-for-tablets';

@import './utilities/clear-unit';
@import './utilities/clear-whitespace';
@import './utilities/convert-to-em';
@import './utilities/convert-to-number';
@import './utilities/darken';
@import './utilities/font-source';
@import './utilities/is-color';
@import './utilities/is-number';
@import './utilities/is-time';
@import './utilities/lighten';
@import './utilities/map-deep-get';
@import './utilities/null';
@import './utilities/pixelify';
@import './utilities/pseudo-selector';
@import './utilities/remify';
@import './utilities/shorthand-property';
@import './utilities/string-to-number';
@import './utilities/validate-breakpoint';
@import './utilities/validate-length';
@import './utilities/validate-scissors';

@import 'functions/color-mixer';
@import 'functions/layer';
@import 'functions/em';

@import './library/absolute';
@import './library/animation';
@import './library/breakpoint-landscape';
@import './library/breakpoint';
@import './library/except';
@import './library/fixed';
@import './library/flex';
@import './library/hide';
@import './library/laptop';
@import './library/loadify';
@import './library/flow';
@import './library/only';
@import './library/pc';
@import './library/phone';
@import './library/remove';
@import './library/screen-agent';
@import './library/size';
@import './library/tablet';
@import './library/text-shadow';
@import './library/text-stroke';

// WIP
@import 'map-keys';
@import 'map-for-ratios';
@import 'scalable-system';
@import 'remove-unit';
@import './utilities/string-replace';
@import 'number-slice';
@import 'list-slice';
@import 'list-reverse';
@import 'map-for-suffixes';


$list-f          : (1rem, 1.5rem, 1.8rem, 2rem, 2.5rem, 3rem, 3.5rem, 4rem, 5rem, 6rem, 8rem);
$list-fa         : (2rem, 2.5rem, 2.8rem, 3rem, 3.5rem, 4rem, 4.5rem, 5rem, 6rem, 7rem);
$list-fmin       : (2.8rem, 3.2rem, 3.5rem, 4rem, 5rem);
$list-fminer     : (3.5rem, 4.8rem);
$list-fminest    : (4.5rem);


@function to-list($value, $keep: 'both') {
	$keep : if(index('keys' 'values', $keep), $keep, 'both');

	@if type-of($value) == 'map' {
		$keys : ();
		$values : ();

		@each $key, $val in $value {
			$keys : append($keys, $key);
			$values : append($values, $val);
		}

		@if $keep == 'keys' {
			@return $keys;
		} @else if $keep == 'values' {
			@return $values;
		} @else {
			@return zip($keys, $values);
		}
	}

	@return if(type-of($value) != 'list', ($value,), $value);
}

@function _get-value($base, $ratio, $preserve, $i, $prefix: null, $suffix: null) {

	@if ($preserve >= $i) {
		@return _number-slice(_get-scale($base, $ratio, $preserve, $i, $prefix));
	} @else if ($preserve + 1 == $i) {
		@return _get-scale($base, $ratio, $preserve, $i, $prefix);
	} @else {
		@return calc(var(--#{$prefix}#{$suffix}) * var(--ratio));
	}
}

/** WIP
 * Returns scaled value of `$number`.
 *
 * @author - Martin Kamír
 *
 * @example
 * _scale-number(1rem, 50%) => 0.5rem;
 * _scale-number(1rem, 150) => 1.5rem;
 * @overload _scale-number($number, $scale: 100%)
 * @param $number {number} - The number that is being scaled. Accepts only numbers with rem unit or no unit.
 * @param $decrease {number} - Value that is being scaled by. Accepts only numbers with % unit or no unit.
 * @return scaled number
 */
@function _scale-number($number, $scale: 100%) {

	// Checks if `$scale` is not number
	@if (meta.type-of($scale) != number) {
		@error 'Value of `$scale` must be a number.';
	}

	// Checks if `$scale` have `%` as unit or is `unitless`
	@if (math.unit($scale) != '%') {
		@error 'Value of `$scale` must have `%` as unit.';
	}

	// Checks if value of `$scale` is less than `0`
	@if ($scale < 0) {
		@error 'Parameter `$scale` holds value `#{$scale}`. Value must be greater than `0`.';
	}

	@if (meta.type-of($number) == string) {
		@return $number;
	}

	$scale : __remove-unit($scale, '%'); // Remove unit `%` from `$scale`
	$number : math.div($number, 100) * $scale; // Calculates new value of `$number`

	@return $number; // Returns new value of `$number`.
}

/**
 * Returns `$list` of corresponding suffixes. Based on `$suffix`.
 *
 * NOTE: This is helper function for function `_create-suffix-list`.
 *
 * @author - Martin Kamír
 *
 * @example
 * _create-suffix-list('size-x-minmax', (1rem, 2rem, 3rem, 4rem, 5rem), $minmax: true) => (min, s, m, l, max);
 * _create-suffix-list('size-x', (1rem, 2rem, 3rem, 4rem, 5rem)) => (xs, s, m, l, xl);
 * _create-suffix-list('size-minmax', (1rem, 2rem, 3rem, 4rem, 5rem), $minmax: true) => (min, small, medium, large, max);
 * @overload _create-suffix-list($suffix, $set-list-of-values, $minmax: false)
 * @param $suffix {string} - Name of the set suffix that will be used in outputting the suffix. Which is originally called from main `@mixin` as `suffix` parameter.
 * @param $set-list-of-values {list} - List of values that are being used for generating. Which is originally called from main `@mixin` as `$custom-sizes` parameter.
 * @param $minmax {boolean} - As default set to false. If set to true, suffixes will be generated for `min` and `max` values.
 * @return list of suffixes
 */
@function _create-suffix-list($suffix, $length, $minmax: false) {

	// Get higher and lower suffixes list from map for suffixes
	$lower-values : map.get($map-for-suffixes, $suffix, lower-values);
	$higher-values : map.get($map-for-suffixes, $suffix, higher-values);

	// Get the minimum and maximum index by
	// 1. Getting the length of the list
	// 2. Dividing the length of list by half
	// 3. For the minimum index ceil the number up to the next integer. For the maximum index floor the number down to the next integer
	$min-index : math.ceil(math.div($length, 2));
	$max-index : math.floor(math.div($length, 2));

	// Slice the list to get the minimum and maximum values
	$lower-list : __list-slice($lower-values, $end : $min-index);
	$higher-list : __list-slice($higher-values, $end : $max-index);

	// If `$minmax` is true, add `min` and `max` values to the list
	@if ($minmax == true) {
		$lower-list : list.set-nth($lower-list, -1, 'min');
		$higher-list : list.set-nth($higher-list, -1, 'max');
	}

	// Concatenate the lower and higher list.
	// The lower list will be at the beginning of the list. That is |why we need to reverse the lower list.
	// The higher list will be at the end of the list.|
	$list : list.join(__list-reverse($lower-list), $higher-list);

	@return $list; // Return the list of suffixes
}

/**
 * Returns string or number(as string) of suffix based on current `$i`, which have to corresponding with `$suffix`.
 *
 * @author - Martin Kamír
 *
 * @example
 * _get-suffix(numeric, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.2rem, 2) => 2;
 * _get-suffix(numeric-hundreds, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.2rem, 2) => 200;
 * _get-suffix(hard-suffix, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.5rem, 3) => 2-5;
 * _get-suffix((1A, 2A, 3A, 4A, 5A, 6A), (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 4rem, 4) => 4A;
 * _get-suffix(roman, (1rem, 2.2rem, 2.5rem, 4rem, 5rem), 2.5rem, 3) => III;
 * _get-suffix(size, (1rem, 2rem, 3rem, 4rem, 5rem), 3rem, 3) => medium;
 * _get-suffix(size-x-minmax, (1rem, 2rem, 3rem, 4rem, 5rem), 1rem, 1) => min;
 * _get-suffix(size-and-number, (1rem, 2rem, 3rem, 4rem, 5rem), 1rem, 1) => small-2;
 * _get-suffix(size-and-x, (1rem, 2rem, 3rem, 4rem, 5rem), 5rem, 5) => big-xl;
 *
 * @overload _get-suffix($suffix: 'numeric', $set-list-of-values, $i)
 *
 * @param $suffix {string} - As default set to `numeric`.
 * It is name of the set suffix that will be used in outputting the suffix.
 * Which is originally called from main `@mixin` as `suffix` parameter.
 *
 * @param $set-list-of-values {list} - List of values that are being used for generating.
 * Which is originally called from main `@mixin` as `$custom-sizes` parameter.
 *
 * @param $hard-suffix {number} - The actual value based on current index in loop which is generated. The value will be used as suffix so it is hard coded value/suffix.
 * @param $i {number} - The current index in loop.
 * @return string suffix
 */
@function _get-suffix($suffix: 'numeric', $length,  $i) {

	@if ($suffix == 'numeric') {
		@return $i; // Returns the current number based on the index

	} @else if ($suffix == 'numeric-hundreds') {
		@return $i + '00'; // Returns the current number based on the index and adds `00` to the end

	} @else if (meta.type-of($suffix) == 'list') {
		// Checks if `$suffix` is list. Which means that is custom suffixes list
		@return list.nth($suffix, $i); // Returns suffix from list based on current `$i` in loop

	} @else if (list.index(('roman', 'greek', 'military', 'planets', 'nato', 'alphabet', 'alphabet-upper', 'primary'), $suffix)) {
		// Get corresponding suffix list based on `$suffix`
		$list-of-suffixes : map.get($map-for-suffixes, $suffix);

		@return list.nth($list-of-suffixes, $i); // Returns suffix from list based on current `$i` in loop
	} @else if (list.index(('size', 'size-minmax', 'size-shorted', 'size-shorted-minmax', 'size-x', 'size-x-minmax', 'size-gradation', 'size-gradation-minmax', 'size-and-number', 'size-and-number-minmax', 'size-and-x', 'size-and-x-minmax'), $suffix)) {

		// Map which holds corresponding suffixes for `size scaling`
		$map-of-suffixes : (
				'size' : _create-suffix-list($suffix, $length),
				'size' : _create-suffix-list($suffix, $length),
				'size-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-shorted' : _create-suffix-list($suffix, $length),
				'size-shorted-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-x' : _create-suffix-list($suffix, $length),
				'size-x-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-gradation' : _create-suffix-list($suffix, $length),
				'size-gradation-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-and-number' : _create-suffix-list($suffix, $length),
				'size-and-number-minmax' : _create-suffix-list($suffix, $length, $minmax : true),
				'size-and-x' : _create-suffix-list($suffix, $length),
				'size-and-x-minmax' : _create-suffix-list($suffix, $length, $minmax : true)
		);

		// Loop over map and check if `$suffix` corresponding with `$key-suffix`
		@each $key-suffix, $list-of-suffixes in $map-of-suffixes {
			@if ($suffix == $key-suffix) {
				@return list.nth($list-of-suffixes, $i); // Returns suffix from list based on current `$i` in loop
			}
		}
	} @else {
		@error 'Invalid suffix type of #{$suffix}. Valid types are: #{__map-keys($map-for-suffixes)}';
	}
}

@function _get-name($name, $specified-name) {
	@if ($specified-name != null) {
		@return $specified-name;
	} @else {
		@return $name;
	}
}

@mixin _variable($prefix, $suffix: null, $value, $suffix-is: true) {
	--#{$prefix}#{$suffix} : #{$value};
}

@mixin stack-classes($prefix: null) {
	@at-root .stack {
		display : grid;
		gap     : var(--#{if($prefix != null, $prefix, 'space')});;
	}
	@at-root .stack > * {
		margin : 0;
	}
}

@mixin _declaration($prefix, $suffix, $value, $selector: 'font-size') {
	@if $selector == 'none' {
		--#{$prefix} : var(--#{$prefix}#{$suffix});
	} @else {
		#{$selector} : var(--#{$prefix}#{$suffix});
	}

}

@function _class($prefix, $suffix) {
	@return #{$prefix}#{$suffix};
}


@mixin _scale-generator($config) {

	$key             : map.get($config, 'key');
	$selector        : map.get($config, 'selector');
	$base            : map.get($config, 'base');
	$ratio           : map.get($config, 'ratio');
	$length          : map.get($config, 'length');
	$preserve        : map.get($config, 'preserve');
	$utility-classes : map.get($config, 'utility-classes');
	$src             : map.get($config, 'src');
	$break-at        : map.get($config, 'break-at');
	$breakpoints     : map.get($config, 'breakpoints');
	$scale           : map.get($config, 'scale');
	$prefix          : map.get($config, 'prefix');
	$prefix-class    : map.get($config, 'prefix-class');
	$prefix-variable : map.get($config, 'prefix-variable');
	$suffix          : map.get($config, 'suffix');
	$suffix-class    : map.get($config, 'suffix-class');
	$suffix-variable : map.get($config, 'suffix-variable');

	$src-length      : list.length($src);
	$src-type        : meta.type-of($src);
	$ratio           : if(map.has-key($map-for-ratios, $ratio), map.get($map-for-ratios, $ratio), $ratio);

	$prefix          : _get-name($prefix, $prefix-variable);
	$suffix          : _get-name($suffix, $suffix-variable);
	$_suffix         : null;
	$_prefix         : null;
	$keys            : null;
	$suffix-prev     : null;
	$value           : null;

	@if $base != null {
		--#{$prefix}ratio : #{$ratio};
		--#{$prefix}base  : #{$base};
	}

	@if $src-type == map {
		$keys       : to-list($src, 'keys');
		$src        : to-list($src, 'values');
		$src-length : list.length($src);
	}

	@for $i from 1 through if($length != null, $length, $src-length) {
		$_suffix : _get-suffix($suffix, $length, $i);
		$_prefix : _get-name($prefix, $prefix-variable);

		@if $base != null {
			$value : calc(var(--#{$prefix}base) * var(--ratio));

			@if $i > 1 {
				$suffix-prev : _get-suffix($suffix, $length, $i - 1);
				$value       : calc(var(--#{$prefix}#{$suffix-prev}) * var(--ratio));
			}

			@if $preserve > 1 {
				$value : _get-value($base, $ratio, $preserve, $i, $prefix);

				@if $i > 1 {
					$value : _get-value($base, $ratio, $preserve, $i, $prefix, $suffix-prev);
				}
			}
		}

		@if $src-type == list or $src-type == map {
			$_suffix : _get-suffix($suffix, $src-length, $i);
			$value   : _scale-number(list.nth($src, $i), $scale);
		}

		@if $src-type == map {
			$_prefix : list.nth($keys, $i);
			$_suffix : '';
		}

		@include _variable($_prefix, $_suffix, $value);

		@if ($utility-classes) {
			@at-root .#{_class(if($src-type == map, $_prefix, _get-name($prefix, $prefix-class)), _get-suffix(if($src-type == map, $_suffix, _get-name($suffix, $suffix-class)), $src-length, $i))} {
				@include _declaration($_prefix, $_suffix, $value, $selector);
			}
		}
	}

	@if ($break-at != null) {
		@for $i from 1 through list.length($breakpoints) {
			$breakpoint : list.nth(list.nth($breakpoints, $i), 1);
			$src        : list.nth(list.nth($breakpoints, $i), 2);
			$src-type   : meta.type-of(list.nth(list.nth($breakpoints, $i), 2));

			@if $src-type == map {
				$keys : to-list($src, 'keys');
				$src  : to-list($src, 'values');
			}

			@include breakpoint($break-at, $breakpoint) {
				$x : 1;
				$y : $src-length - list.length($src) + 1;

				@while $y <= $src-length {
					$_prefix : _get-name($prefix, $prefix-variable);
					$_suffix : _get-suffix($suffix, $src-length, $y);
					$value   : _scale-number(list.nth($src, $x), $scale);

					@if $src-type == map {
						$_prefix : list.nth($keys, $x);
						$_suffix : '';
					}

					@include _variable($_prefix, $_suffix, $value);

					$y       : $y + 1;
					$x       : $x + 1;
				}
			}
		}
	}

	@if $key == 'space-scales' and $utility-classes == true {
		@include stack-classes($prefix);
	}
}

;

@function _get-config($config, $key) {
	@if meta.type-of($config) != map {
		@error "Invalid type parameter: '$config' must be a map.";
	}

	@if map.has-key($config, $key) {
		@return map.get($config, $key);
	} @else {
		@return $config;
	}
}

@mixin _validate-keys($map, $valid-keys: null) {
	$valid-keys : ('key', 'selector', 'base', 'ratio', 'length', 'preserve', 'utility-classes', 'src', 'scale', 'prefix', 'suffix', 'prefix-class', 'prefix-variable', 'suffix-class', 'suffix-variable', 'break-at', 'breakpoints');
	$keys       : ();

	@each $key, $value in $map {
		$keys : list.append($keys, $key);

		@if meta.type-of($value) == map {
			$map : map.deep-remove($map, $value);
			$map : map.merge($map, $value);
		}

		@each $key, $value in $map {
			@if meta.type-of($key) != string {
				@error "Invalid key '#{$key}': all keys must be a string in the map.";
			} @else if string.length($key) < 1 {
				@error "Invalid key length: all keys must be at least 1 character in the map.";
			}
		}
	}

	@for $i from 1 through list.length($keys) {
		@if (list.nth($valid-keys, $i) != list.nth($keys, $i)) {
			@error "Invalid parameter '#{list.nth($keys, $i)}': must be one of #{$valid-keys}.";
		}
	}
}

@mixin _validate-config-parameters($config) {

	@include _validate-keys($config);

	$base            : map.get($config, 'base');
	$ratio           : map.get($config, 'ratio');
	$length          : map.get($config, 'length');
	$preserve        : map.get($config, 'preserve');
	$utility-classes : map.get($config, 'utility-classes');
	$src             : map.get($config, 'src');
	$break-at        : map.get($config, 'break-at');
	$breakpoints     : map.get($config, 'breakpoints');
	$scale           : map.get($config, 'scale');
	$prefix          : map.get($config, 'prefix');
	$prefix-class    : map.get($config, 'prefix-class');
	$prefix-variable : map.get($config, 'prefix-variable');
	$suffix          : map.get($config, 'suffix');
	$suffix-class    : map.get($config, 'suffix-class');
	$suffix-variable : map.get($config, 'suffix-variable');


	@if ($base != null or $ratio != null or $length != null or $preserve != 0) and
		($src != null or $break-at != null or $breakpoints != null or $scale != 100%) {
		@error "Invalid set of parameters: 'base', 'ratio', 'length', 'preserve' AND 'src', 'break-at', 'breakpoints', 'scale' are mutually exclusive.";
	}

	@if (meta.type-of($base) != 'null' and meta.type-of($base) != number) or
		 (meta.type-of($ratio) != 'null' and meta.type-of($ratio) != string and meta.type-of($ratio) != number) or
		 (meta.type-of($length) != 'null' and meta.type-of($length) != number) or
		 (meta.type-of($utility-classes) != bool) or
		 (meta.type-of($src) != 'null' and meta.type-of($src) != map and meta.type-of($src) != list and meta.type-of($src) != arglist and meta.type-of($src) != number) or
		 (meta.type-of($break-at) != 'null' and meta.type-of($break-at) != string) or
		 (meta.type-of($breakpoints) != 'null' and meta.type-of($breakpoints) != map) or
		 (meta.type-of($scale) != number) or
		 (meta.type-of($prefix) != string) or
		 (meta.type-of($prefix-class) != 'null' and meta.type-of($prefix-class) != string) or
		 (meta.type-of($prefix-variable) != 'null' and meta.type-of($prefix-variable) != string) or
		 (meta.type-of($suffix) != string and meta.type-of($suffix) != list) or
		 (meta.type-of($suffix-class) != 'null' and meta.type-of($suffix-class) != string and meta.type-of($suffix-class) != list) or
		 (meta.type-of($suffix-variable) != 'null' and meta.type-of($suffix-variable) != string and meta.type-of($suffix-variable) != list) {
		@error 'Invalid type value: check if values hold the corresponding type.';
	}

	@if (meta.type-of($base) != 'null' and $base < 0) or ($scale < 0) {
		@error "Invalid value: 'base', 'length', 'scale' must be greater than or equal to 0.";
	}

	@if meta.type-of($base) != 'null' and math.is-unitless($base) {
		@error "Invalid value: 'base' must be a number with a unit.";
	}

	@if (meta.type-of($ratio) != string and meta.type-of($ratio) != 'null' and math.is-unitless($ratio) != true) or
		(math.is-unitless($preserve) != true) or
		(meta.type-of($ratio) != 'null' and math.is-unitless($length) != true) {
		@error "Invalid value: 'ratio', 'preserve', 'length' must be a number with no unit.";
	}

	@if math.round($preserve) != $preserve or (meta.type-of($ratio) != 'null' and math.round($length) != $length) {
		@error "Invalid value: 'preserve', 'length' must be an integer.";
	}

	@if meta.type-of($ratio) != 'null' and map.has-key($map-for-ratios, $ratio) != true {
		@error "Invalid value: 'ratio' must be one of #{__map-keys($map-for-ratios)}.";
	}

	@if meta.type-of($ratio) != 'null' and ($preserve > $length) {
		@error "Invalid value: 'preserve' must be less than or equal to 'length'.";
	}

	@if (meta.type-of($ratio) != 'null') and ($length > 40 or $length < 1) {
		@error "Invalid value: 'length' must be between 1 and 40.";
	};

	@if (math.unit($scale) != '%') {
		@error "Invalid value: 'scale' must be a percentage.";
	}

	@if ($break-at != null and $break-at != 'min' and $break-at != 'max') {
		@error "Invalid value: 'break-at' must be 'min' or 'max'.";
	}
}

@mixin generator($config) {

	@include generate-font-scales($config);
	@include generate-space-scales($config);
	@include generate-fluid-fonts($config);
	@include generate-fluid-spaces($config);
	@include generate-colors($config);
	@include generate-properties($config);
}

@mixin generate-font-scales($config: null, $base: null, $ratio: null, $length: null, $preserve: 0, $utility-classes: true, $src: null, $scale: 100%, $prefix: 'f-size-', $suffix: 'numeric', $prefix-class: null, $prefix-variable: null, $suffix-class: null, $suffix-variable: null) {
	$key     : 'font-scales';
	$_config : (
			'key': $key,
			'selector' : 'font-size',
			'base' : $base,
			'ratio' : $ratio,
			'length' : $length,
			'preserve' : $preserve,
			'utility-classes' : $utility-classes,
			'src' : $src,
			'scale' : $scale,
			'prefix' : $prefix,
			'suffix' : $suffix,
			'prefix-class' : $prefix-class,
			'prefix-variable' : $prefix-variable,
			'suffix-class' : $suffix-class,
			'suffix-variable' : $suffix-variable,
	);

	@if $config != null {
		$_config : map.deep-merge($_config, _get-config($config, $key));
	}

	@include _validate-config-parameters($_config);
	@include _scale-generator($_config)
}
@mixin generate-space-scales($config, $base: null, $ratio: null, $length: null, $preserve: 0, $utility-classes: true, $src: null, $scale: 100%, $prefix: 'space-', $suffix: 'numeric', $prefix-class: null, $prefix-variable: null, $suffix-class: null, $suffix-variable: null) {
	$key     : 'space-scales';
	$_config : (
			'key': $key,
			'selector' : 'none',
			'base' : $base,
			'ratio' : $ratio,
			'length' : $length,
			'preserve' : $preserve,
			'utility-classes' : $utility-classes,
			'src' : $src,
			'scale' : $scale,
			'prefix' : $prefix,
			'suffix' : $suffix,
			'prefix-class' : $prefix-class,
			'prefix-variable' : $prefix-variable,
			'suffix-class' : $suffix-class,
			'suffix-variable' : $suffix-variable,
	);


	@if $config != null {
		$_config : map.deep-merge($_config, _get-config($config, $key));
	}

	@include _validate-config-parameters($_config);
	@include _scale-generator($_config);

}
@mixin generate-fluid-fonts($config) {
	// do something
};
@mixin generate-fluid-spaces($config) {
	// do something
};
@mixin generate-colors($config) {
	// do something
};
@mixin generate-properties($config) {
	// do something
};


$map-ff          : (
		'break-at': 'max',
		'src' : (
				'f-size-1' : 1rem,
				'f-size-2' : 1.5rem,
				'f-size-3' : 2rem,
				'f-size-4' : 2.5rem,
				'f-size-5' : 3rem,
				'f-size-6' : 3.5rem,
				'f-size-7' : 4rem,
				'f-size-8' : 5rem,
				'f-size-9' : 6rem,
				'f-size-10' : 8rem,
		),
		'tablet-md' : (
				'f-size-7' : 1rem,
				'f-size-8' : 3rem,
				'f-size-9' : 4rem,
				'f-size-10' : 5rem,
		),
		'tablet-min' : (
				'f-size-9' : 3rem,
				'f-size-10' : 2rem,
		),
);

$map-f           : (
		'text-1' : 1rem,
		'text-2' : 1.5rem,
		'text-3' : 2rem,
		'text-4' : 2.5rem,
		'text-5' : 3rem,
);

$map-fmin        : (
		'text-8' : 1rem,
		'text-9' : 1.5rem,
		'text-10' : 2rem,
		'text-11' : 2.5rem,
		'text-12' : 3rem,
);

$config-ultimate : (
		'font-scales' : (
			//'base' : 1rem,
			//'ratio' : 'major-second',
			//'length' : 10,
				'src' : $list-f,
			//'src' : $list-f,
			//	'scale' : 150%,
				'break-at' : 'max',
				'breakpoints': (
						'pc-xs' : $list-fmin,
						'tablet-max' : $list-fminer,
						'phone-max' : $list-fminest,
				),
				'prefix' : 'text-',
				'suffix-variable' : 'numeric-hundreds',
				'suffix-class' : 'roman',
		),
		'space-scales' : (
				'base' : 1.5rem,
				'ratio' : 'major-second',
				'length' : 10,
				'preserve' : 5,
		),
);

$test-config     : (
	//'base' : 1rem,
	//'ratio' : 'major-second',
	//'length' : 5,
		'src' : $list-f,
		'prefix' : 'text-',
);

$test-config2    : (
	//'base' : 0.5rem,
	//'ratio' : 'minor-second',
	//'length' : 5,
		'src' : $list-f,
);

:root {
	//--f-size-asd : 6rem;
	//@include generate-font-scales($test-config);
	//@include generate-font-scales($base : 5rem, $ratio: 1.125, $length: 10);
	//@include generate-font-scales($config-ultimate);
	@include generate-space-scales($config-ultimate);
	@include generate-font-scales($config-ultimate);
	//@include generate-flow-scales($config-ultimate);

	//@include _scale-generator($custom-values : $list-f, $prefix : 'text-', $suffix : 'numeric', $utility-classes : false);
	//@include _scale-generator($custom-values : $list-fa, $prefix : 'size-', $suffix : 'size-x-minmax', $utility-classes : false);
	//@include _scale-generator($config);
	//@include _scale-generator($custom-values : $map-f, $scale : 100%);
	//@include _scale-generator($base : 2rem, $ratio : 'major-second', $length : 9, $prefix: 'text-', $suffix-variable: 'size-and-x-minmax');

	@include breakpoint(max, 1000px) {
	}
}

/*
@mixin generate-fluid-fonts($config) {
	// do something
}

@mixin generate-fluid-flows($config) {
	// do something
}

@mixin generate-colors-scale($config) {
	// do something
}

@mixin generate-properties($config) {
	// do something
}


$config-ultimate : (
		'font-scales' : (
				'src' : $list-f,
				'break-at' : 'max',
				'breakpoints': (
						'pc-xs' : $list-fmin,
						'tablet-max' : $list-fminer,
						'phone-max' : $list-fminest,
				),
				'prefix' : 'text-',
		),
		'flow-scales' : (
				'base' : 1rem,
				'ratio' : 'major-second',
				'length' : 10,
		),
		'fluid-fonts' : (
			// config
		),
		'fluid-spaces' : (
			// config
		),
	//'colors-scale' : ('map'),
		'colors-scale' : (
				'scale' : (20%, 40%, 80%),
				'primary' : crimson,
				'secondary' : (
						'default' : #555555,
						'lighter' : #555555,
						'light' : #555555,
						'dark' : #555555,
						'darker' : #555555,
				),
				'tertiary' : ('list'),
				'text' : #000000,
				'surface' : #ffffff,
				'btn-primary' : #333333,
				'btn-secondary' : crimson,
				'socials' :('facebook', 'twitter', 'instagram', 'pinterest', 'youtube', 'linkedin'),
			//'state' : ('map'),
			//'state' : true,
				'state' : (
						'error' : #333333,
						'warning' : #333333,
						'success' : #333333,
				),
		),
		'properties' : ($map-for-letterspacing, $map-for-shadows,),
		'line-height' : (
				'src' : ('list'),
				'prefix' : 'line-height-',
				'suffix' : 'roman',
		),
);

*/
