@charset "UTF-8";
@use "sass:string";
@use "sass:meta";
@use "sass:math";
@use "sass:map";
@use "sass:list";

@import './lists/list-of-directions';
@import './lists/list-of-layers';

@import './properties/aspect-ratios';
@import './properties/borders';
@import './properties/breakpoints';
@import './properties/color-palette';
@import './properties/easing';
@import './properties/animations';
@import './properties/shadows';
@import './properties/sizes';
@import './properties/typography';
@import './properties/tokens';

@import './maps/map-for-borders';
@import './maps/map-for-breakpoints';
@import './maps/map-for-flexbox';
@import './maps/map-for-font-weights';
@import './maps/map-for-font-sizes';
@import './maps/map-for-colors';
@import './maps/map-for-directions';
@import './maps/map-for-laptops';
@import './maps/map-for-letterspacing';
@import './maps/map-for-lineheights';
@import './maps/map-for-pc';
@import './maps/map-for-shadows';
@import './maps/map-for-sizes';
@import './maps/map-for-phones';
@import './maps/map-for-tablets';

@import './utilities/clear-unit';
@import './utilities/clear-whitespace';
@import './utilities/convert-to-em';
@import './utilities/convert-to-number';
@import './utilities/darken';
@import './utilities/font-sizer';
@import './utilities/font-source';
@import './utilities/is-color';
@import './utilities/is-number';
@import './utilities/is-time';
@import './utilities/lighten';
@import './utilities/map-deep-get';
@import './utilities/null';
@import './utilities/pixelify';
@import './utilities/pseudo-selector';
@import './utilities/remify';
@import './utilities/shorthand-property';
@import './utilities/string-to-number';
@import './utilities/validate-breakpoint';
@import './utilities/validate-length';
@import './utilities/validate-scissors';

@import 'functions/color-mixer';
@import 'functions/layer';
@import 'functions/em';

@import './library/absolute';
@import './library/animation';
@import './library/breakpoint-landscape';
@import './library/breakpoint';
@import './library/except';
@import './library/fixed';
@import './library/flex';
@import './library/hide';
@import './library/laptop';
@import './library/loadify';
@import './library/flow';
@import './library/only';
@import './library/pc';
@import './library/phone';
@import './library/remove';
@import './library/screen-agent';
@import './library/size';
@import './library/tablet';
@import './library/text-shadow';
@import './library/text-stroke';

// WIP
@import './utilities/has-type';
@import 'scalable-system';
@import 'remove-unit';
@import './utilities/string-replace';
@import 'number-slice';
@import 'list-slice';
@import 'list-reverse';
@import 'map-for-suffixes';


$map-for-scales  : (
		'minor-second' : 1.067,
		'major-second': 1.125,
		'minor-third' : 1.200,
		'major-third' : 1.250,
		'perfect-fourth' : 1.333,
		'augmented fourth' : 1.414,
		'perfect-fifth' : 1.500,
		'golden-ratio' : 1.618
);

$map-for-font-s  : (
		'f-size-1a' : 2.1,
		'f-size-2a' : 2.2,
		'f-size-3a' : 2.3,
		'f-size-4a' : 2.4,
		'f-size-5a' : 2.5,
		'f-size-55a' : 2.5,
		'f-size-541a' : 2.5,
		'f-size-5541a' : 2.5,
		'f-size-6a' : 2.6,
		'f-size-7a' : 2.7rem,
		'f-size-8a' : 2.8,
		'f-size-9a' : 2.9rem,
		'f-size-10a' : 3rem,
);

$list-for-font-s : (1, 2, 3, 4.5);


@function __generate-value($base, $ratio, $preserve, $i) {

	@if ($preserve >= $i) {
		$get-number : __scalable-system($base, $ratio, $preserve, $i);
		$sliced-number : __number-slice($get-number);
		$number : $sliced-number;

		@return $number;
	} @else if ($preserve + 1 == $i) {
		$get-number : __scalable-system($base, $ratio, $preserve, $i);
		$number : $get-number;

		@return $number;
	} @else {

		@return calc(var(--f-size-#{$i - 1}) * var(--ratio));
	}
}


/**
 * Returns scaled value of `$number`.
 *
 * @author - Martin KamÃ­r
 *
 * @example
 * __number-scale(1rem, 50%) => 0.5rem;
 * __number-scale(1rem, 150) => 1.5rem;
 * @overload __number-scale($number, $scale: 100%)
 * @param $number {number} - The number that is being scaled. Accepts only numbers with rem unit or no unit.
 * @param $decrease {number} - Value that is being scaled by. Accepts only numbers with % unit or no unit.
 * @return scaled number
 */
@function __decrease-number($number, $scale: 100%) {

	// Checks if `$scale` is not number
	@if (meta.type-of($scale) != 'number') {
		@error 'Value of `$scale` must be a number.';
	}

	// Checks if `$scale` have `%` as unit or is `unitless`
	@if (math.unit($scale) != '%' and math.is-unitless($scale) != true or meta.type-of($scale) != 'number') {
		@error 'Unit of `$scale` must be only in % or unitless. Change your #{$scale} to #{__string-replace(#{$scale}, #{math.unit($scale)}, '%')} or #{__string-replace(#{$scale}, #{math.unit($scale)}, '')} without any unit.';
	}

	// Checks if value of `$scale` is less than `0`
	@if ($scale < 0) {
		@error 'Value of `$scale => #{$scale}` must be greater than `0`.';
	}

	@if (math.unit($number) != 'rem' and math.is-unitless($number) != true) {
		@error 'Number must be only in rem or unitless. Change your #{$number} to #{__string-replace(#{$number}, #{math.unit($number)}, 'rem')} or #{__string-replace(#{$number}, #{math.unit($number)}, '')} without any unit.';
	}

	$scale : __remove-unit($scale, '%'); // Remove unit `%` from `$scale`
	$number : math.div($number, 100) * $scale; // Calculates new value of `$number`

	@return $number;
}


//@function __make-list($list, $i, $make-list-from-min, $make-list-from-max) {
//	$create-small-list : list.set-nth(__list-reverse(__list-slice($make-list-from-min, 1, math.ceil(math.div(list.length($list), 2)))), 1, 'min');
//	$create-big-list : list.set-nth(__list-slice($make-list-from-max, 1, math.floor(math.div(list.length($list), 2))), -1, 'max');
//	$created-list : list.join($create-small-list, $create-big-list);
//	@return list.nth($created-list, $i);
//}


@function __get-suffix-list($suffix, $custom) {
	$get-lower-list : map.get($map-for-suffixes, $suffix, lower-values);
	$get-higher-list : map.get($map-for-suffixes, $suffix, higher-values);

	$min-index : math.ceil(math.div(list.length($custom), 2));
	$max-index : math.floor(math.div(list.length($custom), 2));

	$sliced-lower-list : __list-slice($get-lower-list, $end : $min-index);
	$sliced-higher-list : __list-slice($get-higher-list, $end : $max-index);

	$list : list.join(__list-reverse($sliced-lower-list), $sliced-higher-list);

	@return $list;
}

@function __validate-suffix($map, $suffix, $custom, $i) {

	$result: 0;
	@each $key, $value in $map {
		@if (list.length($custom) < list.length($value) or $suffix == $key) {
			@if (list.length($custom) > list.length($value) and $suffix == 'size') {
				$result: map.get($map, 'size-gradation');
			}

			$result: list.nth($value, $i);
		}
	}

	@return $result;
}

//@function __get-suffix($suffix, $custom-sizes, $literal-values, $i) {
@function __level($suffix, $i, $custom, $literal-number) {

	// Check for `numeric` scaling
	@if ($suffix == 'numeric') {
		@return $i; // Return number of `$i`

		// Check for `numeric-hundreds` scaling
	} @else if ($suffix == 'numeric-hundreds') {
		@return $i + '00'; // Return number of `$i` plus `00`

		// Check for `minmax` scaling
	} @else if ($suffix == 'minmax') {

		$list-of-higher-values : map.get($map-for-suffixes, $suffix, higher-values);
		$list-of-lower-values : map.get($map-for-suffixes, $suffix, lower-values);

		@if (list.length($custom) > list.length(list.join($list-of-higher-values, $list-of-lower-values))) {
			@error 'do latera'
		}

		$create-small-list : list.set-nth(__list-reverse(__list-slice($list-of-lower-values, 1, math.ceil(math.div(list.length($custom), 2)))), 1, 'min');
		$create-big-list : list.set-nth(__list-slice($list-of-higher-values, 1, math.floor(math.div(list.length($custom), 2))), -1, 'max');
		$created-list : list.join($create-small-list, $create-big-list);

		@return list.nth($created-list, $i);

		// Check for `literal-number`
	} @else if ($suffix == 'literal-number') {
		$removed-unit : __string-replace($literal-number, 'rem'); // Remove `unit` from `number`
		$replaced-dot : __string-replace($removed-unit, '.', '-'); // Replace `.` with `-`. Because `.` is not allowed in class names
		$number : $replaced-dot;
		@return $number;

	} @else if ($suffix == 'size' or $suffix == 'size-gradation' or $suffix == 'size-and-number' or $suffix == 'size-and-x') {

		$size-suffixes : __get-suffix-list('size', $custom);
		$size-gradation-suffixes : __get-suffix-list('size-gradation', $custom);
		$size-and-number-suffixes : __get-suffix-list('size-and-number', $custom);
		$size-and-x-suffixes : __get-suffix-list('size-and-x', $custom);

		$map-of-suffixes : (
				'size' : $size-suffixes,
				'size-gradation' : $size-gradation-suffixes,
				'size-and-number' : $size-and-number-suffixes,
				'size-and-x' : $size-and-x-suffixes) ;

		@return __validate-suffix($map-of-suffixes, $suffix, $custom, $i);

	} @else if ($suffix == 'roman' or $suffix == 'greek' or $suffix == 'military' or $suffix == 'planets' or $suffix == 'nato' or $suffix == 'primary') {
		$list : map.get($map-for-suffixes, $suffix);

		@if (list.length($custom) > list.length($list)) {
			@error 'do later aa'
		}

		@return list.nth($list, $i);
	} @else if (meta.type-of($suffix) == 'list') {
		@return list.nth($suffix, $i);
	}
}

@function __decide-class($prefix, $prefix-class) {
	@if ($prefix-class != null) {
		@return $prefix-class;
	} @else {
		@return $prefix;
	}
}

@function __decide-custom-naming($suffix, $suffix-class, $i, $custom, $atomic) {
	@if ($suffix-class != null) {
		@return __level($suffix-class, $i, $custom, $atomic);
	} @else {
		@return __level($suffix, $i, $custom, $atomic);
	}
}

//$base
//$ratio
//$types
//$preserve - needs to change
//$utility-classes
//$custom-sizes
//$scale
//$prefix
//$suffix
//$prefix-class
//$suffix-class
//$prefix-variable
//$suffix-variable
@mixin generate-type-scale($base: null, $ratio: null, $types: null, $preserve: 0, $utility-classes: false, $custom: null, $decrease: 100%, $prefix: 'f-size-', $suffix: 'numeric', $prefix-class: null, $prefix-variable: null, $suffix-class: null, $suffix-variable: null) {
	@if (meta.type-of($custom) == 'list') {
		@for $i from 1 through list.length($custom) {
			--#{__decide-class($prefix, $prefix-variable)}#{__decide-custom-naming($suffix,$suffix-variable, $i, $custom, $atomic: __decrease-number(list.nth($custom, $i), $decrease))} : #{__decrease-number(list.nth($custom, $i), $decrease)};

			@if (utility-classes) {
				@at-root .#{__decide-class($prefix, $prefix-class)}#{__decide-custom-naming($suffix,$suffix-class, $i, $custom, $atomic: __decrease-number(list.nth($custom, $i), $decrease))} {
					font-size : var(--#{__decide-class($prefix, $prefix-variable)}#{__decide-custom-naming($suffix,$suffix-variable, $i, $custom, $atomic: __decrease-number(list.nth($custom, $i), $decrease))});
				}
			}
		}
	} @else if (meta.type-of($custom) == 'map') {
		@each $key, $value in $custom {
			--#{$key} : #{__decrease-number(($value), $decrease)};


			@if (utility-classes) {
				@at-root .#{$key} {
					font-size : var(--#{$key});
				}
			}
		}
	} @else {
		$TYPES_MAX_LIMIT : 40;
		$TYPES_MIN_LIMIT : 3;
		--f-size-base    : #{$base};

		@if ($types > $TYPES_MAX_LIMIT) {
			@error "The maximum number of types is 40. Use smaller number than #{$types}.";
		}

		@if ($types < $TYPES_MIN_LIMIT) {
			@error "The minimum number of types is 3. Use larger number than #{$types}.";
		}

		@if ($preserve > $types) {
			@error "The preserve number is larger than the number of types. Use smaller number than #{$types}.";
		}

		@if (meta.type-of($ratio) == string) {
			$ratio  : map.get($map-for-scales, $ratio);
			--ratio : #{$ratio};
		} @else {
			--ratio : #{$ratio};
		}

		@if ($preserve == 0) {
			--f-size-start : calc(var(--f-size-base) / var(--ratio));
			--f-size-0     : calc(var(--f-size-start) * var(--ratio));

			@for $i from 1 through $types {
				--f-size-#{$i} : calc(var(--f-size-#{$i - 1}) * var(--ratio));
			}
		} @else {
			$base          : math.div($base, $ratio);
			--f-size-0     : #{$base};

			@for $i from 1 through $types {
				--f-size-#{$i} : #{__generate-value($base, $ratio, $preserve, $i)};
			}
		}

		@if ($utility-classes) {
			@for $i from 1 through $types {
				@at-root .f-size-#{$i} {
					font-size : var(--f-size-#{$i});
				}
			}
		}
	}
}

:root {
	@include generate-type-scale($custom : (1rem, 2, 3rem, 4, 5, 6, 6, 6, 6, 1, 1), $decrease : 150%, $utility-classes : true, $suffix : 'size');
	//@include generate-type-scale($base : 1rem, $types : 10, $ratio : 1.125, $preserve : 5,  $utility-classes : true, $prefix: 'text-');

	//@include breakpoint(max, 1000px) {
	//@include generate-type-scale($custom: (1rem,2,3rem,4), $utility-classes : true);

}

